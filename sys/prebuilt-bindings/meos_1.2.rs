/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const LWFLAG_Z: u32 = 1;
pub const LWFLAG_M: u32 = 2;
pub const LWFLAG_BBOX: u32 = 4;
pub const LWFLAG_GEODETIC: u32 = 8;
pub const LWFLAG_READONLY: u32 = 16;
pub const LWFLAG_SOLID: u32 = 32;
pub const WKB_ISO: u32 = 1;
pub const WKB_SFSQL: u32 = 2;
pub const WKB_EXTENDED: u32 = 4;
pub const WKB_NDR: u32 = 8;
pub const WKB_XDR: u32 = 16;
pub const WKB_HEX: u32 = 32;
pub const WKB_NO_NPOINTS: u32 = 64;
pub const WKB_NO_SRID: u32 = 128;
pub const WKT_ISO: u32 = 1;
pub const WKT_SFSQL: u32 = 2;
pub const WKT_EXTENDED: u32 = 4;
pub const SKIPLIST_MAXLEVEL: u32 = 32;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::__pad5"][::std::mem::offset_of!(_IO_FILE, __pad5) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type Pointer = *mut ::std::os::raw::c_char;
pub type Datum = usize;
pub type int8 = ::std::os::raw::c_schar;
pub type int16 = ::std::os::raw::c_short;
pub type int32 = ::std::os::raw::c_int;
pub type int64 = ::std::os::raw::c_long;
pub type uint8 = ::std::os::raw::c_uchar;
pub type uint16 = ::std::os::raw::c_ushort;
pub type uint32 = ::std::os::raw::c_uint;
pub type uint64 = ::std::os::raw::c_ulong;
pub type DateADT = int32;
pub type TimeADT = int64;
pub type Timestamp = int64;
pub type TimestampTz = int64;
pub type TimeOffset = int64;
pub type fsec_t = int32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Interval {
    pub time: TimeOffset,
    pub day: int32,
    pub month: int32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Interval"][::std::mem::size_of::<Interval>() - 16usize];
    ["Alignment of Interval"][::std::mem::align_of::<Interval>() - 8usize];
    ["Offset of field: Interval::time"][::std::mem::offset_of!(Interval, time) - 0usize];
    ["Offset of field: Interval::day"][::std::mem::offset_of!(Interval, day) - 8usize];
    ["Offset of field: Interval::month"][::std::mem::offset_of!(Interval, month) - 12usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct varlena {
    pub vl_len_: [::std::os::raw::c_char; 4usize],
    pub vl_dat: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of varlena"][::std::mem::size_of::<varlena>() - 4usize];
    ["Alignment of varlena"][::std::mem::align_of::<varlena>() - 1usize];
    ["Offset of field: varlena::vl_len_"][::std::mem::offset_of!(varlena, vl_len_) - 0usize];
    ["Offset of field: varlena::vl_dat"][::std::mem::offset_of!(varlena, vl_dat) - 4usize];
};
pub type text = varlena;
pub type bytea = varlena;
pub type lwflags_t = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AFFINE {
    pub afac: f64,
    pub bfac: f64,
    pub cfac: f64,
    pub dfac: f64,
    pub efac: f64,
    pub ffac: f64,
    pub gfac: f64,
    pub hfac: f64,
    pub ifac: f64,
    pub xoff: f64,
    pub yoff: f64,
    pub zoff: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AFFINE"][::std::mem::size_of::<AFFINE>() - 96usize];
    ["Alignment of AFFINE"][::std::mem::align_of::<AFFINE>() - 8usize];
    ["Offset of field: AFFINE::afac"][::std::mem::offset_of!(AFFINE, afac) - 0usize];
    ["Offset of field: AFFINE::bfac"][::std::mem::offset_of!(AFFINE, bfac) - 8usize];
    ["Offset of field: AFFINE::cfac"][::std::mem::offset_of!(AFFINE, cfac) - 16usize];
    ["Offset of field: AFFINE::dfac"][::std::mem::offset_of!(AFFINE, dfac) - 24usize];
    ["Offset of field: AFFINE::efac"][::std::mem::offset_of!(AFFINE, efac) - 32usize];
    ["Offset of field: AFFINE::ffac"][::std::mem::offset_of!(AFFINE, ffac) - 40usize];
    ["Offset of field: AFFINE::gfac"][::std::mem::offset_of!(AFFINE, gfac) - 48usize];
    ["Offset of field: AFFINE::hfac"][::std::mem::offset_of!(AFFINE, hfac) - 56usize];
    ["Offset of field: AFFINE::ifac"][::std::mem::offset_of!(AFFINE, ifac) - 64usize];
    ["Offset of field: AFFINE::xoff"][::std::mem::offset_of!(AFFINE, xoff) - 72usize];
    ["Offset of field: AFFINE::yoff"][::std::mem::offset_of!(AFFINE, yoff) - 80usize];
    ["Offset of field: AFFINE::zoff"][::std::mem::offset_of!(AFFINE, zoff) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BOX3D {
    pub xmin: f64,
    pub ymin: f64,
    pub zmin: f64,
    pub xmax: f64,
    pub ymax: f64,
    pub zmax: f64,
    pub srid: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BOX3D"][::std::mem::size_of::<BOX3D>() - 56usize];
    ["Alignment of BOX3D"][::std::mem::align_of::<BOX3D>() - 8usize];
    ["Offset of field: BOX3D::xmin"][::std::mem::offset_of!(BOX3D, xmin) - 0usize];
    ["Offset of field: BOX3D::ymin"][::std::mem::offset_of!(BOX3D, ymin) - 8usize];
    ["Offset of field: BOX3D::zmin"][::std::mem::offset_of!(BOX3D, zmin) - 16usize];
    ["Offset of field: BOX3D::xmax"][::std::mem::offset_of!(BOX3D, xmax) - 24usize];
    ["Offset of field: BOX3D::ymax"][::std::mem::offset_of!(BOX3D, ymax) - 32usize];
    ["Offset of field: BOX3D::zmax"][::std::mem::offset_of!(BOX3D, zmax) - 40usize];
    ["Offset of field: BOX3D::srid"][::std::mem::offset_of!(BOX3D, srid) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GBOX {
    pub flags: lwflags_t,
    pub xmin: f64,
    pub xmax: f64,
    pub ymin: f64,
    pub ymax: f64,
    pub zmin: f64,
    pub zmax: f64,
    pub mmin: f64,
    pub mmax: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GBOX"][::std::mem::size_of::<GBOX>() - 72usize];
    ["Alignment of GBOX"][::std::mem::align_of::<GBOX>() - 8usize];
    ["Offset of field: GBOX::flags"][::std::mem::offset_of!(GBOX, flags) - 0usize];
    ["Offset of field: GBOX::xmin"][::std::mem::offset_of!(GBOX, xmin) - 8usize];
    ["Offset of field: GBOX::xmax"][::std::mem::offset_of!(GBOX, xmax) - 16usize];
    ["Offset of field: GBOX::ymin"][::std::mem::offset_of!(GBOX, ymin) - 24usize];
    ["Offset of field: GBOX::ymax"][::std::mem::offset_of!(GBOX, ymax) - 32usize];
    ["Offset of field: GBOX::zmin"][::std::mem::offset_of!(GBOX, zmin) - 40usize];
    ["Offset of field: GBOX::zmax"][::std::mem::offset_of!(GBOX, zmax) - 48usize];
    ["Offset of field: GBOX::mmin"][::std::mem::offset_of!(GBOX, mmin) - 56usize];
    ["Offset of field: GBOX::mmax"][::std::mem::offset_of!(GBOX, mmax) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPHEROID {
    pub a: f64,
    pub b: f64,
    pub f: f64,
    pub e: f64,
    pub e_sq: f64,
    pub radius: f64,
    pub name: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SPHEROID"][::std::mem::size_of::<SPHEROID>() - 72usize];
    ["Alignment of SPHEROID"][::std::mem::align_of::<SPHEROID>() - 8usize];
    ["Offset of field: SPHEROID::a"][::std::mem::offset_of!(SPHEROID, a) - 0usize];
    ["Offset of field: SPHEROID::b"][::std::mem::offset_of!(SPHEROID, b) - 8usize];
    ["Offset of field: SPHEROID::f"][::std::mem::offset_of!(SPHEROID, f) - 16usize];
    ["Offset of field: SPHEROID::e"][::std::mem::offset_of!(SPHEROID, e) - 24usize];
    ["Offset of field: SPHEROID::e_sq"][::std::mem::offset_of!(SPHEROID, e_sq) - 32usize];
    ["Offset of field: SPHEROID::radius"][::std::mem::offset_of!(SPHEROID, radius) - 40usize];
    ["Offset of field: SPHEROID::name"][::std::mem::offset_of!(SPHEROID, name) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct POINT2D {
    pub x: f64,
    pub y: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of POINT2D"][::std::mem::size_of::<POINT2D>() - 16usize];
    ["Alignment of POINT2D"][::std::mem::align_of::<POINT2D>() - 8usize];
    ["Offset of field: POINT2D::x"][::std::mem::offset_of!(POINT2D, x) - 0usize];
    ["Offset of field: POINT2D::y"][::std::mem::offset_of!(POINT2D, y) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct POINT3DZ {
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of POINT3DZ"][::std::mem::size_of::<POINT3DZ>() - 24usize];
    ["Alignment of POINT3DZ"][::std::mem::align_of::<POINT3DZ>() - 8usize];
    ["Offset of field: POINT3DZ::x"][::std::mem::offset_of!(POINT3DZ, x) - 0usize];
    ["Offset of field: POINT3DZ::y"][::std::mem::offset_of!(POINT3DZ, y) - 8usize];
    ["Offset of field: POINT3DZ::z"][::std::mem::offset_of!(POINT3DZ, z) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct POINT3D {
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of POINT3D"][::std::mem::size_of::<POINT3D>() - 24usize];
    ["Alignment of POINT3D"][::std::mem::align_of::<POINT3D>() - 8usize];
    ["Offset of field: POINT3D::x"][::std::mem::offset_of!(POINT3D, x) - 0usize];
    ["Offset of field: POINT3D::y"][::std::mem::offset_of!(POINT3D, y) - 8usize];
    ["Offset of field: POINT3D::z"][::std::mem::offset_of!(POINT3D, z) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct POINT3DM {
    pub x: f64,
    pub y: f64,
    pub m: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of POINT3DM"][::std::mem::size_of::<POINT3DM>() - 24usize];
    ["Alignment of POINT3DM"][::std::mem::align_of::<POINT3DM>() - 8usize];
    ["Offset of field: POINT3DM::x"][::std::mem::offset_of!(POINT3DM, x) - 0usize];
    ["Offset of field: POINT3DM::y"][::std::mem::offset_of!(POINT3DM, y) - 8usize];
    ["Offset of field: POINT3DM::m"][::std::mem::offset_of!(POINT3DM, m) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct POINT4D {
    pub x: f64,
    pub y: f64,
    pub z: f64,
    pub m: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of POINT4D"][::std::mem::size_of::<POINT4D>() - 32usize];
    ["Alignment of POINT4D"][::std::mem::align_of::<POINT4D>() - 8usize];
    ["Offset of field: POINT4D::x"][::std::mem::offset_of!(POINT4D, x) - 0usize];
    ["Offset of field: POINT4D::y"][::std::mem::offset_of!(POINT4D, y) - 8usize];
    ["Offset of field: POINT4D::z"][::std::mem::offset_of!(POINT4D, z) - 16usize];
    ["Offset of field: POINT4D::m"][::std::mem::offset_of!(POINT4D, m) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct POINTARRAY {
    pub npoints: u32,
    pub maxpoints: u32,
    pub flags: lwflags_t,
    pub serialized_pointlist: *mut u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of POINTARRAY"][::std::mem::size_of::<POINTARRAY>() - 24usize];
    ["Alignment of POINTARRAY"][::std::mem::align_of::<POINTARRAY>() - 8usize];
    ["Offset of field: POINTARRAY::npoints"][::std::mem::offset_of!(POINTARRAY, npoints) - 0usize];
    ["Offset of field: POINTARRAY::maxpoints"]
        [::std::mem::offset_of!(POINTARRAY, maxpoints) - 4usize];
    ["Offset of field: POINTARRAY::flags"][::std::mem::offset_of!(POINTARRAY, flags) - 8usize];
    ["Offset of field: POINTARRAY::serialized_pointlist"]
        [::std::mem::offset_of!(POINTARRAY, serialized_pointlist) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GSERIALIZED {
    pub size: u32,
    pub srid: [u8; 3usize],
    pub gflags: u8,
    pub data: [u8; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GSERIALIZED"][::std::mem::size_of::<GSERIALIZED>() - 12usize];
    ["Alignment of GSERIALIZED"][::std::mem::align_of::<GSERIALIZED>() - 4usize];
    ["Offset of field: GSERIALIZED::size"][::std::mem::offset_of!(GSERIALIZED, size) - 0usize];
    ["Offset of field: GSERIALIZED::srid"][::std::mem::offset_of!(GSERIALIZED, srid) - 4usize];
    ["Offset of field: GSERIALIZED::gflags"][::std::mem::offset_of!(GSERIALIZED, gflags) - 7usize];
    ["Offset of field: GSERIALIZED::data"][::std::mem::offset_of!(GSERIALIZED, data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LWGEOM {
    pub bbox: *mut GBOX,
    pub data: *mut ::std::os::raw::c_void,
    pub srid: i32,
    pub flags: lwflags_t,
    pub type_: u8,
    pub pad: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LWGEOM"][::std::mem::size_of::<LWGEOM>() - 24usize];
    ["Alignment of LWGEOM"][::std::mem::align_of::<LWGEOM>() - 8usize];
    ["Offset of field: LWGEOM::bbox"][::std::mem::offset_of!(LWGEOM, bbox) - 0usize];
    ["Offset of field: LWGEOM::data"][::std::mem::offset_of!(LWGEOM, data) - 8usize];
    ["Offset of field: LWGEOM::srid"][::std::mem::offset_of!(LWGEOM, srid) - 16usize];
    ["Offset of field: LWGEOM::flags"][::std::mem::offset_of!(LWGEOM, flags) - 20usize];
    ["Offset of field: LWGEOM::type_"][::std::mem::offset_of!(LWGEOM, type_) - 22usize];
    ["Offset of field: LWGEOM::pad"][::std::mem::offset_of!(LWGEOM, pad) - 23usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LWPOINT {
    pub bbox: *mut GBOX,
    pub point: *mut POINTARRAY,
    pub srid: i32,
    pub flags: lwflags_t,
    pub type_: u8,
    pub pad: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LWPOINT"][::std::mem::size_of::<LWPOINT>() - 24usize];
    ["Alignment of LWPOINT"][::std::mem::align_of::<LWPOINT>() - 8usize];
    ["Offset of field: LWPOINT::bbox"][::std::mem::offset_of!(LWPOINT, bbox) - 0usize];
    ["Offset of field: LWPOINT::point"][::std::mem::offset_of!(LWPOINT, point) - 8usize];
    ["Offset of field: LWPOINT::srid"][::std::mem::offset_of!(LWPOINT, srid) - 16usize];
    ["Offset of field: LWPOINT::flags"][::std::mem::offset_of!(LWPOINT, flags) - 20usize];
    ["Offset of field: LWPOINT::type_"][::std::mem::offset_of!(LWPOINT, type_) - 22usize];
    ["Offset of field: LWPOINT::pad"][::std::mem::offset_of!(LWPOINT, pad) - 23usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LWLINE {
    pub bbox: *mut GBOX,
    pub points: *mut POINTARRAY,
    pub srid: i32,
    pub flags: lwflags_t,
    pub type_: u8,
    pub pad: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LWLINE"][::std::mem::size_of::<LWLINE>() - 24usize];
    ["Alignment of LWLINE"][::std::mem::align_of::<LWLINE>() - 8usize];
    ["Offset of field: LWLINE::bbox"][::std::mem::offset_of!(LWLINE, bbox) - 0usize];
    ["Offset of field: LWLINE::points"][::std::mem::offset_of!(LWLINE, points) - 8usize];
    ["Offset of field: LWLINE::srid"][::std::mem::offset_of!(LWLINE, srid) - 16usize];
    ["Offset of field: LWLINE::flags"][::std::mem::offset_of!(LWLINE, flags) - 20usize];
    ["Offset of field: LWLINE::type_"][::std::mem::offset_of!(LWLINE, type_) - 22usize];
    ["Offset of field: LWLINE::pad"][::std::mem::offset_of!(LWLINE, pad) - 23usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LWTRIANGLE {
    pub bbox: *mut GBOX,
    pub points: *mut POINTARRAY,
    pub srid: i32,
    pub flags: lwflags_t,
    pub type_: u8,
    pub pad: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LWTRIANGLE"][::std::mem::size_of::<LWTRIANGLE>() - 24usize];
    ["Alignment of LWTRIANGLE"][::std::mem::align_of::<LWTRIANGLE>() - 8usize];
    ["Offset of field: LWTRIANGLE::bbox"][::std::mem::offset_of!(LWTRIANGLE, bbox) - 0usize];
    ["Offset of field: LWTRIANGLE::points"][::std::mem::offset_of!(LWTRIANGLE, points) - 8usize];
    ["Offset of field: LWTRIANGLE::srid"][::std::mem::offset_of!(LWTRIANGLE, srid) - 16usize];
    ["Offset of field: LWTRIANGLE::flags"][::std::mem::offset_of!(LWTRIANGLE, flags) - 20usize];
    ["Offset of field: LWTRIANGLE::type_"][::std::mem::offset_of!(LWTRIANGLE, type_) - 22usize];
    ["Offset of field: LWTRIANGLE::pad"][::std::mem::offset_of!(LWTRIANGLE, pad) - 23usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LWCIRCSTRING {
    pub bbox: *mut GBOX,
    pub points: *mut POINTARRAY,
    pub srid: i32,
    pub flags: lwflags_t,
    pub type_: u8,
    pub pad: [::std::os::raw::c_char; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LWCIRCSTRING"][::std::mem::size_of::<LWCIRCSTRING>() - 24usize];
    ["Alignment of LWCIRCSTRING"][::std::mem::align_of::<LWCIRCSTRING>() - 8usize];
    ["Offset of field: LWCIRCSTRING::bbox"][::std::mem::offset_of!(LWCIRCSTRING, bbox) - 0usize];
    ["Offset of field: LWCIRCSTRING::points"]
        [::std::mem::offset_of!(LWCIRCSTRING, points) - 8usize];
    ["Offset of field: LWCIRCSTRING::srid"][::std::mem::offset_of!(LWCIRCSTRING, srid) - 16usize];
    ["Offset of field: LWCIRCSTRING::flags"][::std::mem::offset_of!(LWCIRCSTRING, flags) - 20usize];
    ["Offset of field: LWCIRCSTRING::type_"][::std::mem::offset_of!(LWCIRCSTRING, type_) - 22usize];
    ["Offset of field: LWCIRCSTRING::pad"][::std::mem::offset_of!(LWCIRCSTRING, pad) - 23usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LWPOLY {
    pub bbox: *mut GBOX,
    pub rings: *mut *mut POINTARRAY,
    pub srid: i32,
    pub flags: lwflags_t,
    pub type_: u8,
    pub pad: [::std::os::raw::c_char; 1usize],
    pub nrings: u32,
    pub maxrings: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LWPOLY"][::std::mem::size_of::<LWPOLY>() - 32usize];
    ["Alignment of LWPOLY"][::std::mem::align_of::<LWPOLY>() - 8usize];
    ["Offset of field: LWPOLY::bbox"][::std::mem::offset_of!(LWPOLY, bbox) - 0usize];
    ["Offset of field: LWPOLY::rings"][::std::mem::offset_of!(LWPOLY, rings) - 8usize];
    ["Offset of field: LWPOLY::srid"][::std::mem::offset_of!(LWPOLY, srid) - 16usize];
    ["Offset of field: LWPOLY::flags"][::std::mem::offset_of!(LWPOLY, flags) - 20usize];
    ["Offset of field: LWPOLY::type_"][::std::mem::offset_of!(LWPOLY, type_) - 22usize];
    ["Offset of field: LWPOLY::pad"][::std::mem::offset_of!(LWPOLY, pad) - 23usize];
    ["Offset of field: LWPOLY::nrings"][::std::mem::offset_of!(LWPOLY, nrings) - 24usize];
    ["Offset of field: LWPOLY::maxrings"][::std::mem::offset_of!(LWPOLY, maxrings) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LWMPOINT {
    pub bbox: *mut GBOX,
    pub geoms: *mut *mut LWPOINT,
    pub srid: i32,
    pub flags: lwflags_t,
    pub type_: u8,
    pub pad: [::std::os::raw::c_char; 1usize],
    pub ngeoms: u32,
    pub maxgeoms: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LWMPOINT"][::std::mem::size_of::<LWMPOINT>() - 32usize];
    ["Alignment of LWMPOINT"][::std::mem::align_of::<LWMPOINT>() - 8usize];
    ["Offset of field: LWMPOINT::bbox"][::std::mem::offset_of!(LWMPOINT, bbox) - 0usize];
    ["Offset of field: LWMPOINT::geoms"][::std::mem::offset_of!(LWMPOINT, geoms) - 8usize];
    ["Offset of field: LWMPOINT::srid"][::std::mem::offset_of!(LWMPOINT, srid) - 16usize];
    ["Offset of field: LWMPOINT::flags"][::std::mem::offset_of!(LWMPOINT, flags) - 20usize];
    ["Offset of field: LWMPOINT::type_"][::std::mem::offset_of!(LWMPOINT, type_) - 22usize];
    ["Offset of field: LWMPOINT::pad"][::std::mem::offset_of!(LWMPOINT, pad) - 23usize];
    ["Offset of field: LWMPOINT::ngeoms"][::std::mem::offset_of!(LWMPOINT, ngeoms) - 24usize];
    ["Offset of field: LWMPOINT::maxgeoms"][::std::mem::offset_of!(LWMPOINT, maxgeoms) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LWMLINE {
    pub bbox: *mut GBOX,
    pub geoms: *mut *mut LWLINE,
    pub srid: i32,
    pub flags: lwflags_t,
    pub type_: u8,
    pub pad: [::std::os::raw::c_char; 1usize],
    pub ngeoms: u32,
    pub maxgeoms: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LWMLINE"][::std::mem::size_of::<LWMLINE>() - 32usize];
    ["Alignment of LWMLINE"][::std::mem::align_of::<LWMLINE>() - 8usize];
    ["Offset of field: LWMLINE::bbox"][::std::mem::offset_of!(LWMLINE, bbox) - 0usize];
    ["Offset of field: LWMLINE::geoms"][::std::mem::offset_of!(LWMLINE, geoms) - 8usize];
    ["Offset of field: LWMLINE::srid"][::std::mem::offset_of!(LWMLINE, srid) - 16usize];
    ["Offset of field: LWMLINE::flags"][::std::mem::offset_of!(LWMLINE, flags) - 20usize];
    ["Offset of field: LWMLINE::type_"][::std::mem::offset_of!(LWMLINE, type_) - 22usize];
    ["Offset of field: LWMLINE::pad"][::std::mem::offset_of!(LWMLINE, pad) - 23usize];
    ["Offset of field: LWMLINE::ngeoms"][::std::mem::offset_of!(LWMLINE, ngeoms) - 24usize];
    ["Offset of field: LWMLINE::maxgeoms"][::std::mem::offset_of!(LWMLINE, maxgeoms) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LWMPOLY {
    pub bbox: *mut GBOX,
    pub geoms: *mut *mut LWPOLY,
    pub srid: i32,
    pub flags: lwflags_t,
    pub type_: u8,
    pub pad: [::std::os::raw::c_char; 1usize],
    pub ngeoms: u32,
    pub maxgeoms: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LWMPOLY"][::std::mem::size_of::<LWMPOLY>() - 32usize];
    ["Alignment of LWMPOLY"][::std::mem::align_of::<LWMPOLY>() - 8usize];
    ["Offset of field: LWMPOLY::bbox"][::std::mem::offset_of!(LWMPOLY, bbox) - 0usize];
    ["Offset of field: LWMPOLY::geoms"][::std::mem::offset_of!(LWMPOLY, geoms) - 8usize];
    ["Offset of field: LWMPOLY::srid"][::std::mem::offset_of!(LWMPOLY, srid) - 16usize];
    ["Offset of field: LWMPOLY::flags"][::std::mem::offset_of!(LWMPOLY, flags) - 20usize];
    ["Offset of field: LWMPOLY::type_"][::std::mem::offset_of!(LWMPOLY, type_) - 22usize];
    ["Offset of field: LWMPOLY::pad"][::std::mem::offset_of!(LWMPOLY, pad) - 23usize];
    ["Offset of field: LWMPOLY::ngeoms"][::std::mem::offset_of!(LWMPOLY, ngeoms) - 24usize];
    ["Offset of field: LWMPOLY::maxgeoms"][::std::mem::offset_of!(LWMPOLY, maxgeoms) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LWCOLLECTION {
    pub bbox: *mut GBOX,
    pub geoms: *mut *mut LWGEOM,
    pub srid: i32,
    pub flags: lwflags_t,
    pub type_: u8,
    pub pad: [::std::os::raw::c_char; 1usize],
    pub ngeoms: u32,
    pub maxgeoms: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LWCOLLECTION"][::std::mem::size_of::<LWCOLLECTION>() - 32usize];
    ["Alignment of LWCOLLECTION"][::std::mem::align_of::<LWCOLLECTION>() - 8usize];
    ["Offset of field: LWCOLLECTION::bbox"][::std::mem::offset_of!(LWCOLLECTION, bbox) - 0usize];
    ["Offset of field: LWCOLLECTION::geoms"][::std::mem::offset_of!(LWCOLLECTION, geoms) - 8usize];
    ["Offset of field: LWCOLLECTION::srid"][::std::mem::offset_of!(LWCOLLECTION, srid) - 16usize];
    ["Offset of field: LWCOLLECTION::flags"][::std::mem::offset_of!(LWCOLLECTION, flags) - 20usize];
    ["Offset of field: LWCOLLECTION::type_"][::std::mem::offset_of!(LWCOLLECTION, type_) - 22usize];
    ["Offset of field: LWCOLLECTION::pad"][::std::mem::offset_of!(LWCOLLECTION, pad) - 23usize];
    ["Offset of field: LWCOLLECTION::ngeoms"]
        [::std::mem::offset_of!(LWCOLLECTION, ngeoms) - 24usize];
    ["Offset of field: LWCOLLECTION::maxgeoms"]
        [::std::mem::offset_of!(LWCOLLECTION, maxgeoms) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LWCOMPOUND {
    pub bbox: *mut GBOX,
    pub geoms: *mut *mut LWGEOM,
    pub srid: i32,
    pub flags: lwflags_t,
    pub type_: u8,
    pub pad: [::std::os::raw::c_char; 1usize],
    pub ngeoms: u32,
    pub maxgeoms: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LWCOMPOUND"][::std::mem::size_of::<LWCOMPOUND>() - 32usize];
    ["Alignment of LWCOMPOUND"][::std::mem::align_of::<LWCOMPOUND>() - 8usize];
    ["Offset of field: LWCOMPOUND::bbox"][::std::mem::offset_of!(LWCOMPOUND, bbox) - 0usize];
    ["Offset of field: LWCOMPOUND::geoms"][::std::mem::offset_of!(LWCOMPOUND, geoms) - 8usize];
    ["Offset of field: LWCOMPOUND::srid"][::std::mem::offset_of!(LWCOMPOUND, srid) - 16usize];
    ["Offset of field: LWCOMPOUND::flags"][::std::mem::offset_of!(LWCOMPOUND, flags) - 20usize];
    ["Offset of field: LWCOMPOUND::type_"][::std::mem::offset_of!(LWCOMPOUND, type_) - 22usize];
    ["Offset of field: LWCOMPOUND::pad"][::std::mem::offset_of!(LWCOMPOUND, pad) - 23usize];
    ["Offset of field: LWCOMPOUND::ngeoms"][::std::mem::offset_of!(LWCOMPOUND, ngeoms) - 24usize];
    ["Offset of field: LWCOMPOUND::maxgeoms"]
        [::std::mem::offset_of!(LWCOMPOUND, maxgeoms) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LWCURVEPOLY {
    pub bbox: *mut GBOX,
    pub rings: *mut *mut LWGEOM,
    pub srid: i32,
    pub flags: lwflags_t,
    pub type_: u8,
    pub pad: [::std::os::raw::c_char; 1usize],
    pub nrings: u32,
    pub maxrings: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LWCURVEPOLY"][::std::mem::size_of::<LWCURVEPOLY>() - 32usize];
    ["Alignment of LWCURVEPOLY"][::std::mem::align_of::<LWCURVEPOLY>() - 8usize];
    ["Offset of field: LWCURVEPOLY::bbox"][::std::mem::offset_of!(LWCURVEPOLY, bbox) - 0usize];
    ["Offset of field: LWCURVEPOLY::rings"][::std::mem::offset_of!(LWCURVEPOLY, rings) - 8usize];
    ["Offset of field: LWCURVEPOLY::srid"][::std::mem::offset_of!(LWCURVEPOLY, srid) - 16usize];
    ["Offset of field: LWCURVEPOLY::flags"][::std::mem::offset_of!(LWCURVEPOLY, flags) - 20usize];
    ["Offset of field: LWCURVEPOLY::type_"][::std::mem::offset_of!(LWCURVEPOLY, type_) - 22usize];
    ["Offset of field: LWCURVEPOLY::pad"][::std::mem::offset_of!(LWCURVEPOLY, pad) - 23usize];
    ["Offset of field: LWCURVEPOLY::nrings"][::std::mem::offset_of!(LWCURVEPOLY, nrings) - 24usize];
    ["Offset of field: LWCURVEPOLY::maxrings"]
        [::std::mem::offset_of!(LWCURVEPOLY, maxrings) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LWMCURVE {
    pub bbox: *mut GBOX,
    pub geoms: *mut *mut LWGEOM,
    pub srid: i32,
    pub flags: lwflags_t,
    pub type_: u8,
    pub pad: [::std::os::raw::c_char; 1usize],
    pub ngeoms: u32,
    pub maxgeoms: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LWMCURVE"][::std::mem::size_of::<LWMCURVE>() - 32usize];
    ["Alignment of LWMCURVE"][::std::mem::align_of::<LWMCURVE>() - 8usize];
    ["Offset of field: LWMCURVE::bbox"][::std::mem::offset_of!(LWMCURVE, bbox) - 0usize];
    ["Offset of field: LWMCURVE::geoms"][::std::mem::offset_of!(LWMCURVE, geoms) - 8usize];
    ["Offset of field: LWMCURVE::srid"][::std::mem::offset_of!(LWMCURVE, srid) - 16usize];
    ["Offset of field: LWMCURVE::flags"][::std::mem::offset_of!(LWMCURVE, flags) - 20usize];
    ["Offset of field: LWMCURVE::type_"][::std::mem::offset_of!(LWMCURVE, type_) - 22usize];
    ["Offset of field: LWMCURVE::pad"][::std::mem::offset_of!(LWMCURVE, pad) - 23usize];
    ["Offset of field: LWMCURVE::ngeoms"][::std::mem::offset_of!(LWMCURVE, ngeoms) - 24usize];
    ["Offset of field: LWMCURVE::maxgeoms"][::std::mem::offset_of!(LWMCURVE, maxgeoms) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LWMSURFACE {
    pub bbox: *mut GBOX,
    pub geoms: *mut *mut LWGEOM,
    pub srid: i32,
    pub flags: lwflags_t,
    pub type_: u8,
    pub pad: [::std::os::raw::c_char; 1usize],
    pub ngeoms: u32,
    pub maxgeoms: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LWMSURFACE"][::std::mem::size_of::<LWMSURFACE>() - 32usize];
    ["Alignment of LWMSURFACE"][::std::mem::align_of::<LWMSURFACE>() - 8usize];
    ["Offset of field: LWMSURFACE::bbox"][::std::mem::offset_of!(LWMSURFACE, bbox) - 0usize];
    ["Offset of field: LWMSURFACE::geoms"][::std::mem::offset_of!(LWMSURFACE, geoms) - 8usize];
    ["Offset of field: LWMSURFACE::srid"][::std::mem::offset_of!(LWMSURFACE, srid) - 16usize];
    ["Offset of field: LWMSURFACE::flags"][::std::mem::offset_of!(LWMSURFACE, flags) - 20usize];
    ["Offset of field: LWMSURFACE::type_"][::std::mem::offset_of!(LWMSURFACE, type_) - 22usize];
    ["Offset of field: LWMSURFACE::pad"][::std::mem::offset_of!(LWMSURFACE, pad) - 23usize];
    ["Offset of field: LWMSURFACE::ngeoms"][::std::mem::offset_of!(LWMSURFACE, ngeoms) - 24usize];
    ["Offset of field: LWMSURFACE::maxgeoms"]
        [::std::mem::offset_of!(LWMSURFACE, maxgeoms) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LWPSURFACE {
    pub bbox: *mut GBOX,
    pub geoms: *mut *mut LWPOLY,
    pub srid: i32,
    pub flags: lwflags_t,
    pub type_: u8,
    pub pad: [::std::os::raw::c_char; 1usize],
    pub ngeoms: u32,
    pub maxgeoms: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LWPSURFACE"][::std::mem::size_of::<LWPSURFACE>() - 32usize];
    ["Alignment of LWPSURFACE"][::std::mem::align_of::<LWPSURFACE>() - 8usize];
    ["Offset of field: LWPSURFACE::bbox"][::std::mem::offset_of!(LWPSURFACE, bbox) - 0usize];
    ["Offset of field: LWPSURFACE::geoms"][::std::mem::offset_of!(LWPSURFACE, geoms) - 8usize];
    ["Offset of field: LWPSURFACE::srid"][::std::mem::offset_of!(LWPSURFACE, srid) - 16usize];
    ["Offset of field: LWPSURFACE::flags"][::std::mem::offset_of!(LWPSURFACE, flags) - 20usize];
    ["Offset of field: LWPSURFACE::type_"][::std::mem::offset_of!(LWPSURFACE, type_) - 22usize];
    ["Offset of field: LWPSURFACE::pad"][::std::mem::offset_of!(LWPSURFACE, pad) - 23usize];
    ["Offset of field: LWPSURFACE::ngeoms"][::std::mem::offset_of!(LWPSURFACE, ngeoms) - 24usize];
    ["Offset of field: LWPSURFACE::maxgeoms"]
        [::std::mem::offset_of!(LWPSURFACE, maxgeoms) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LWTIN {
    pub bbox: *mut GBOX,
    pub geoms: *mut *mut LWTRIANGLE,
    pub srid: i32,
    pub flags: lwflags_t,
    pub type_: u8,
    pub pad: [::std::os::raw::c_char; 1usize],
    pub ngeoms: u32,
    pub maxgeoms: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LWTIN"][::std::mem::size_of::<LWTIN>() - 32usize];
    ["Alignment of LWTIN"][::std::mem::align_of::<LWTIN>() - 8usize];
    ["Offset of field: LWTIN::bbox"][::std::mem::offset_of!(LWTIN, bbox) - 0usize];
    ["Offset of field: LWTIN::geoms"][::std::mem::offset_of!(LWTIN, geoms) - 8usize];
    ["Offset of field: LWTIN::srid"][::std::mem::offset_of!(LWTIN, srid) - 16usize];
    ["Offset of field: LWTIN::flags"][::std::mem::offset_of!(LWTIN, flags) - 20usize];
    ["Offset of field: LWTIN::type_"][::std::mem::offset_of!(LWTIN, type_) - 22usize];
    ["Offset of field: LWTIN::pad"][::std::mem::offset_of!(LWTIN, pad) - 23usize];
    ["Offset of field: LWTIN::ngeoms"][::std::mem::offset_of!(LWTIN, ngeoms) - 24usize];
    ["Offset of field: LWTIN::maxgeoms"][::std::mem::offset_of!(LWTIN, maxgeoms) - 28usize];
};
extern "C" {
    pub fn geo_get_srid(g: *const GSERIALIZED) -> int32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PJconsts {
    _unused: [u8; 0],
}
pub type PJ = PJconsts;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LWPROJ {
    pub pj: *mut PJ,
    pub pipeline_is_forward: bool,
    pub source_is_latlong: u8,
    pub source_semi_major_metre: f64,
    pub source_semi_minor_metre: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LWPROJ"][::std::mem::size_of::<LWPROJ>() - 32usize];
    ["Alignment of LWPROJ"][::std::mem::align_of::<LWPROJ>() - 8usize];
    ["Offset of field: LWPROJ::pj"][::std::mem::offset_of!(LWPROJ, pj) - 0usize];
    ["Offset of field: LWPROJ::pipeline_is_forward"]
        [::std::mem::offset_of!(LWPROJ, pipeline_is_forward) - 8usize];
    ["Offset of field: LWPROJ::source_is_latlong"]
        [::std::mem::offset_of!(LWPROJ, source_is_latlong) - 9usize];
    ["Offset of field: LWPROJ::source_semi_major_metre"]
        [::std::mem::offset_of!(LWPROJ, source_semi_major_metre) - 16usize];
    ["Offset of field: LWPROJ::source_semi_minor_metre"]
        [::std::mem::offset_of!(LWPROJ, source_semi_minor_metre) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Set {
    pub vl_len_: int32,
    pub settype: uint8,
    pub basetype: uint8,
    pub flags: int16,
    pub count: int32,
    pub maxcount: int32,
    pub bboxsize: int16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Set"][::std::mem::size_of::<Set>() - 20usize];
    ["Alignment of Set"][::std::mem::align_of::<Set>() - 4usize];
    ["Offset of field: Set::vl_len_"][::std::mem::offset_of!(Set, vl_len_) - 0usize];
    ["Offset of field: Set::settype"][::std::mem::offset_of!(Set, settype) - 4usize];
    ["Offset of field: Set::basetype"][::std::mem::offset_of!(Set, basetype) - 5usize];
    ["Offset of field: Set::flags"][::std::mem::offset_of!(Set, flags) - 6usize];
    ["Offset of field: Set::count"][::std::mem::offset_of!(Set, count) - 8usize];
    ["Offset of field: Set::maxcount"][::std::mem::offset_of!(Set, maxcount) - 12usize];
    ["Offset of field: Set::bboxsize"][::std::mem::offset_of!(Set, bboxsize) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Span {
    pub spantype: uint8,
    pub basetype: uint8,
    pub lower_inc: bool,
    pub upper_inc: bool,
    pub padding: [::std::os::raw::c_char; 4usize],
    pub lower: Datum,
    pub upper: Datum,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Span"][::std::mem::size_of::<Span>() - 24usize];
    ["Alignment of Span"][::std::mem::align_of::<Span>() - 8usize];
    ["Offset of field: Span::spantype"][::std::mem::offset_of!(Span, spantype) - 0usize];
    ["Offset of field: Span::basetype"][::std::mem::offset_of!(Span, basetype) - 1usize];
    ["Offset of field: Span::lower_inc"][::std::mem::offset_of!(Span, lower_inc) - 2usize];
    ["Offset of field: Span::upper_inc"][::std::mem::offset_of!(Span, upper_inc) - 3usize];
    ["Offset of field: Span::padding"][::std::mem::offset_of!(Span, padding) - 4usize];
    ["Offset of field: Span::lower"][::std::mem::offset_of!(Span, lower) - 8usize];
    ["Offset of field: Span::upper"][::std::mem::offset_of!(Span, upper) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpanSet {
    pub vl_len_: int32,
    pub spansettype: uint8,
    pub spantype: uint8,
    pub basetype: uint8,
    pub padding: ::std::os::raw::c_char,
    pub count: int32,
    pub maxcount: int32,
    pub span: Span,
    pub elems: [Span; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SpanSet"][::std::mem::size_of::<SpanSet>() - 64usize];
    ["Alignment of SpanSet"][::std::mem::align_of::<SpanSet>() - 8usize];
    ["Offset of field: SpanSet::vl_len_"][::std::mem::offset_of!(SpanSet, vl_len_) - 0usize];
    ["Offset of field: SpanSet::spansettype"]
        [::std::mem::offset_of!(SpanSet, spansettype) - 4usize];
    ["Offset of field: SpanSet::spantype"][::std::mem::offset_of!(SpanSet, spantype) - 5usize];
    ["Offset of field: SpanSet::basetype"][::std::mem::offset_of!(SpanSet, basetype) - 6usize];
    ["Offset of field: SpanSet::padding"][::std::mem::offset_of!(SpanSet, padding) - 7usize];
    ["Offset of field: SpanSet::count"][::std::mem::offset_of!(SpanSet, count) - 8usize];
    ["Offset of field: SpanSet::maxcount"][::std::mem::offset_of!(SpanSet, maxcount) - 12usize];
    ["Offset of field: SpanSet::span"][::std::mem::offset_of!(SpanSet, span) - 16usize];
    ["Offset of field: SpanSet::elems"][::std::mem::offset_of!(SpanSet, elems) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TBox {
    pub period: Span,
    pub span: Span,
    pub flags: int16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TBox"][::std::mem::size_of::<TBox>() - 56usize];
    ["Alignment of TBox"][::std::mem::align_of::<TBox>() - 8usize];
    ["Offset of field: TBox::period"][::std::mem::offset_of!(TBox, period) - 0usize];
    ["Offset of field: TBox::span"][::std::mem::offset_of!(TBox, span) - 24usize];
    ["Offset of field: TBox::flags"][::std::mem::offset_of!(TBox, flags) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct STBox {
    pub period: Span,
    pub xmin: f64,
    pub ymin: f64,
    pub zmin: f64,
    pub xmax: f64,
    pub ymax: f64,
    pub zmax: f64,
    pub srid: int32,
    pub flags: int16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of STBox"][::std::mem::size_of::<STBox>() - 80usize];
    ["Alignment of STBox"][::std::mem::align_of::<STBox>() - 8usize];
    ["Offset of field: STBox::period"][::std::mem::offset_of!(STBox, period) - 0usize];
    ["Offset of field: STBox::xmin"][::std::mem::offset_of!(STBox, xmin) - 24usize];
    ["Offset of field: STBox::ymin"][::std::mem::offset_of!(STBox, ymin) - 32usize];
    ["Offset of field: STBox::zmin"][::std::mem::offset_of!(STBox, zmin) - 40usize];
    ["Offset of field: STBox::xmax"][::std::mem::offset_of!(STBox, xmax) - 48usize];
    ["Offset of field: STBox::ymax"][::std::mem::offset_of!(STBox, ymax) - 56usize];
    ["Offset of field: STBox::zmax"][::std::mem::offset_of!(STBox, zmax) - 64usize];
    ["Offset of field: STBox::srid"][::std::mem::offset_of!(STBox, srid) - 72usize];
    ["Offset of field: STBox::flags"][::std::mem::offset_of!(STBox, flags) - 76usize];
};
pub const tempSubtype_ANYTEMPSUBTYPE: tempSubtype = 0;
pub const tempSubtype_TINSTANT: tempSubtype = 1;
pub const tempSubtype_TSEQUENCE: tempSubtype = 2;
pub const tempSubtype_TSEQUENCESET: tempSubtype = 3;
pub type tempSubtype = ::std::os::raw::c_uint;
pub const interpType_INTERP_NONE: interpType = 0;
pub const interpType_DISCRETE: interpType = 1;
pub const interpType_STEP: interpType = 2;
pub const interpType_LINEAR: interpType = 3;
pub type interpType = ::std::os::raw::c_uint;
pub const spatialRel_INTERSECTS: spatialRel = 0;
pub const spatialRel_CONTAINS: spatialRel = 1;
pub const spatialRel_TOUCHES: spatialRel = 2;
pub const spatialRel_COVERS: spatialRel = 3;
pub type spatialRel = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Temporal {
    pub vl_len_: int32,
    pub temptype: uint8,
    pub subtype: uint8,
    pub flags: int16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Temporal"][::std::mem::size_of::<Temporal>() - 8usize];
    ["Alignment of Temporal"][::std::mem::align_of::<Temporal>() - 4usize];
    ["Offset of field: Temporal::vl_len_"][::std::mem::offset_of!(Temporal, vl_len_) - 0usize];
    ["Offset of field: Temporal::temptype"][::std::mem::offset_of!(Temporal, temptype) - 4usize];
    ["Offset of field: Temporal::subtype"][::std::mem::offset_of!(Temporal, subtype) - 5usize];
    ["Offset of field: Temporal::flags"][::std::mem::offset_of!(Temporal, flags) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TInstant {
    pub vl_len_: int32,
    pub temptype: uint8,
    pub subtype: uint8,
    pub flags: int16,
    pub t: TimestampTz,
    pub value: Datum,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TInstant"][::std::mem::size_of::<TInstant>() - 24usize];
    ["Alignment of TInstant"][::std::mem::align_of::<TInstant>() - 8usize];
    ["Offset of field: TInstant::vl_len_"][::std::mem::offset_of!(TInstant, vl_len_) - 0usize];
    ["Offset of field: TInstant::temptype"][::std::mem::offset_of!(TInstant, temptype) - 4usize];
    ["Offset of field: TInstant::subtype"][::std::mem::offset_of!(TInstant, subtype) - 5usize];
    ["Offset of field: TInstant::flags"][::std::mem::offset_of!(TInstant, flags) - 6usize];
    ["Offset of field: TInstant::t"][::std::mem::offset_of!(TInstant, t) - 8usize];
    ["Offset of field: TInstant::value"][::std::mem::offset_of!(TInstant, value) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSequence {
    pub vl_len_: int32,
    pub temptype: uint8,
    pub subtype: uint8,
    pub flags: int16,
    pub count: int32,
    pub maxcount: int32,
    pub bboxsize: int16,
    pub padding: [::std::os::raw::c_char; 6usize],
    pub period: Span,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TSequence"][::std::mem::size_of::<TSequence>() - 48usize];
    ["Alignment of TSequence"][::std::mem::align_of::<TSequence>() - 8usize];
    ["Offset of field: TSequence::vl_len_"][::std::mem::offset_of!(TSequence, vl_len_) - 0usize];
    ["Offset of field: TSequence::temptype"][::std::mem::offset_of!(TSequence, temptype) - 4usize];
    ["Offset of field: TSequence::subtype"][::std::mem::offset_of!(TSequence, subtype) - 5usize];
    ["Offset of field: TSequence::flags"][::std::mem::offset_of!(TSequence, flags) - 6usize];
    ["Offset of field: TSequence::count"][::std::mem::offset_of!(TSequence, count) - 8usize];
    ["Offset of field: TSequence::maxcount"][::std::mem::offset_of!(TSequence, maxcount) - 12usize];
    ["Offset of field: TSequence::bboxsize"][::std::mem::offset_of!(TSequence, bboxsize) - 16usize];
    ["Offset of field: TSequence::padding"][::std::mem::offset_of!(TSequence, padding) - 18usize];
    ["Offset of field: TSequence::period"][::std::mem::offset_of!(TSequence, period) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TSequenceSet {
    pub vl_len_: int32,
    pub temptype: uint8,
    pub subtype: uint8,
    pub flags: int16,
    pub count: int32,
    pub totalcount: int32,
    pub maxcount: int32,
    pub bboxsize: int16,
    pub padding: int16,
    pub period: Span,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TSequenceSet"][::std::mem::size_of::<TSequenceSet>() - 48usize];
    ["Alignment of TSequenceSet"][::std::mem::align_of::<TSequenceSet>() - 8usize];
    ["Offset of field: TSequenceSet::vl_len_"]
        [::std::mem::offset_of!(TSequenceSet, vl_len_) - 0usize];
    ["Offset of field: TSequenceSet::temptype"]
        [::std::mem::offset_of!(TSequenceSet, temptype) - 4usize];
    ["Offset of field: TSequenceSet::subtype"]
        [::std::mem::offset_of!(TSequenceSet, subtype) - 5usize];
    ["Offset of field: TSequenceSet::flags"][::std::mem::offset_of!(TSequenceSet, flags) - 6usize];
    ["Offset of field: TSequenceSet::count"][::std::mem::offset_of!(TSequenceSet, count) - 8usize];
    ["Offset of field: TSequenceSet::totalcount"]
        [::std::mem::offset_of!(TSequenceSet, totalcount) - 12usize];
    ["Offset of field: TSequenceSet::maxcount"]
        [::std::mem::offset_of!(TSequenceSet, maxcount) - 16usize];
    ["Offset of field: TSequenceSet::bboxsize"]
        [::std::mem::offset_of!(TSequenceSet, bboxsize) - 20usize];
    ["Offset of field: TSequenceSet::padding"]
        [::std::mem::offset_of!(TSequenceSet, padding) - 22usize];
    ["Offset of field: TSequenceSet::period"]
        [::std::mem::offset_of!(TSequenceSet, period) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Match {
    pub i: ::std::os::raw::c_int,
    pub j: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Match"][::std::mem::size_of::<Match>() - 8usize];
    ["Alignment of Match"][::std::mem::align_of::<Match>() - 4usize];
    ["Offset of field: Match::i"][::std::mem::offset_of!(Match, i) - 0usize];
    ["Offset of field: Match::j"][::std::mem::offset_of!(Match, j) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SkipListElem {
    pub value: *mut ::std::os::raw::c_void,
    pub height: ::std::os::raw::c_int,
    pub next: [::std::os::raw::c_int; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SkipListElem"][::std::mem::size_of::<SkipListElem>() - 144usize];
    ["Alignment of SkipListElem"][::std::mem::align_of::<SkipListElem>() - 8usize];
    ["Offset of field: SkipListElem::value"][::std::mem::offset_of!(SkipListElem, value) - 0usize];
    ["Offset of field: SkipListElem::height"]
        [::std::mem::offset_of!(SkipListElem, height) - 8usize];
    ["Offset of field: SkipListElem::next"][::std::mem::offset_of!(SkipListElem, next) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SkipList {
    pub capacity: ::std::os::raw::c_int,
    pub next: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
    pub freed: *mut ::std::os::raw::c_int,
    pub freecount: ::std::os::raw::c_int,
    pub freecap: ::std::os::raw::c_int,
    pub tail: ::std::os::raw::c_int,
    pub extra: *mut ::std::os::raw::c_void,
    pub extrasize: usize,
    pub elems: *mut SkipListElem,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SkipList"][::std::mem::size_of::<SkipList>() - 64usize];
    ["Alignment of SkipList"][::std::mem::align_of::<SkipList>() - 8usize];
    ["Offset of field: SkipList::capacity"][::std::mem::offset_of!(SkipList, capacity) - 0usize];
    ["Offset of field: SkipList::next"][::std::mem::offset_of!(SkipList, next) - 4usize];
    ["Offset of field: SkipList::length"][::std::mem::offset_of!(SkipList, length) - 8usize];
    ["Offset of field: SkipList::freed"][::std::mem::offset_of!(SkipList, freed) - 16usize];
    ["Offset of field: SkipList::freecount"][::std::mem::offset_of!(SkipList, freecount) - 24usize];
    ["Offset of field: SkipList::freecap"][::std::mem::offset_of!(SkipList, freecap) - 28usize];
    ["Offset of field: SkipList::tail"][::std::mem::offset_of!(SkipList, tail) - 32usize];
    ["Offset of field: SkipList::extra"][::std::mem::offset_of!(SkipList, extra) - 40usize];
    ["Offset of field: SkipList::extrasize"][::std::mem::offset_of!(SkipList, extrasize) - 48usize];
    ["Offset of field: SkipList::elems"][::std::mem::offset_of!(SkipList, elems) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RTree {
    _unused: [u8; 0],
}
pub const errorCode_MEOS_SUCCESS: errorCode = 0;
pub const errorCode_MEOS_ERR_INTERNAL_ERROR: errorCode = 1;
pub const errorCode_MEOS_ERR_INTERNAL_TYPE_ERROR: errorCode = 2;
pub const errorCode_MEOS_ERR_VALUE_OUT_OF_RANGE: errorCode = 3;
pub const errorCode_MEOS_ERR_DIVISION_BY_ZERO: errorCode = 4;
pub const errorCode_MEOS_ERR_MEMORY_ALLOC_ERROR: errorCode = 5;
pub const errorCode_MEOS_ERR_AGGREGATION_ERROR: errorCode = 6;
pub const errorCode_MEOS_ERR_DIRECTORY_ERROR: errorCode = 7;
pub const errorCode_MEOS_ERR_FILE_ERROR: errorCode = 8;
pub const errorCode_MEOS_ERR_INVALID_ARG: errorCode = 10;
pub const errorCode_MEOS_ERR_INVALID_ARG_TYPE: errorCode = 11;
pub const errorCode_MEOS_ERR_INVALID_ARG_VALUE: errorCode = 12;
pub const errorCode_MEOS_ERR_MFJSON_INPUT: errorCode = 20;
pub const errorCode_MEOS_ERR_MFJSON_OUTPUT: errorCode = 21;
pub const errorCode_MEOS_ERR_TEXT_INPUT: errorCode = 22;
pub const errorCode_MEOS_ERR_TEXT_OUTPUT: errorCode = 23;
pub const errorCode_MEOS_ERR_WKB_INPUT: errorCode = 24;
pub const errorCode_MEOS_ERR_WKB_OUTPUT: errorCode = 25;
pub const errorCode_MEOS_ERR_GEOJSON_INPUT: errorCode = 26;
pub const errorCode_MEOS_ERR_GEOJSON_OUTPUT: errorCode = 27;
pub type errorCode = ::std::os::raw::c_uint;
extern "C" {
    pub fn meos_error(
        errlevel: ::std::os::raw::c_int,
        errcode: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn meos_errno() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn meos_errno_set(err: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn meos_errno_restore(err: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn meos_errno_reset() -> ::std::os::raw::c_int;
}
pub type error_handler_fn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ),
>;
extern "C" {
    pub fn meos_initialize_timezone(name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn meos_initialize_error_handler(err_handler: error_handler_fn);
}
extern "C" {
    pub fn meos_finalize_timezone();
}
extern "C" {
    pub fn meos_set_datestyle(
        newval: *mut ::std::os::raw::c_char,
        extra: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn meos_set_intervalstyle(
        newval: *mut ::std::os::raw::c_char,
        extra: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn meos_get_datestyle() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn meos_get_intervalstyle() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn meos_initialize();
}
extern "C" {
    pub fn meos_finalize();
}
extern "C" {
    pub fn add_date_int(d: DateADT, days: int32) -> DateADT;
}
extern "C" {
    pub fn add_interval_interval(
        interv1: *const Interval,
        interv2: *const Interval,
    ) -> *mut Interval;
}
extern "C" {
    pub fn add_timestamptz_interval(t: TimestampTz, interv: *const Interval) -> TimestampTz;
}
extern "C" {
    pub fn bool_in(str_: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn bool_out(b: bool) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cstring2text(str_: *const ::std::os::raw::c_char) -> *mut text;
}
extern "C" {
    pub fn date_to_timestamp(dateVal: DateADT) -> Timestamp;
}
extern "C" {
    pub fn date_to_timestamptz(d: DateADT) -> TimestampTz;
}
extern "C" {
    pub fn minus_date_date(d1: DateADT, d2: DateADT) -> *mut Interval;
}
extern "C" {
    pub fn minus_date_int(d: DateADT, days: int32) -> DateADT;
}
extern "C" {
    pub fn minus_timestamptz_interval(t: TimestampTz, interv: *const Interval) -> TimestampTz;
}
extern "C" {
    pub fn minus_timestamptz_timestamptz(t1: TimestampTz, t2: TimestampTz) -> *mut Interval;
}
extern "C" {
    pub fn mult_interval_double(interv: *const Interval, factor: f64) -> *mut Interval;
}
extern "C" {
    pub fn pg_date_in(str_: *const ::std::os::raw::c_char) -> DateADT;
}
extern "C" {
    pub fn pg_date_out(d: DateADT) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pg_interval_cmp(
        interv1: *const Interval,
        interv2: *const Interval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pg_interval_in(str_: *const ::std::os::raw::c_char, typmod: int32) -> *mut Interval;
}
extern "C" {
    pub fn pg_interval_make(
        years: int32,
        months: int32,
        weeks: int32,
        days: int32,
        hours: int32,
        mins: int32,
        secs: f64,
    ) -> *mut Interval;
}
extern "C" {
    pub fn pg_interval_out(interv: *const Interval) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pg_time_in(str_: *const ::std::os::raw::c_char, typmod: int32) -> TimeADT;
}
extern "C" {
    pub fn pg_time_out(t: TimeADT) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pg_timestamp_in(str_: *const ::std::os::raw::c_char, typmod: int32) -> Timestamp;
}
extern "C" {
    pub fn pg_timestamp_out(t: Timestamp) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pg_timestamptz_in(str_: *const ::std::os::raw::c_char, typmod: int32) -> TimestampTz;
}
extern "C" {
    pub fn pg_timestamptz_out(t: TimestampTz) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn text2cstring(txt: *const text) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn text_cmp(txt1: *const text, txt2: *const text) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn text_copy(txt: *const text) -> *mut text;
}
extern "C" {
    pub fn text_initcap(txt: *const text) -> *mut text;
}
extern "C" {
    pub fn text_lower(txt: *const text) -> *mut text;
}
extern "C" {
    pub fn text_out(txt: *const text) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn text_upper(txt: *const text) -> *mut text;
}
extern "C" {
    pub fn textcat_text_text(txt1: *const text, txt2: *const text) -> *mut text;
}
extern "C" {
    pub fn timestamp_to_date(t: Timestamp) -> DateADT;
}
extern "C" {
    pub fn timestamptz_to_date(t: TimestampTz) -> DateADT;
}
extern "C" {
    pub fn geo_as_ewkb(
        gs: *const GSERIALIZED,
        endian: *const ::std::os::raw::c_char,
        size: *mut usize,
    ) -> *mut u8;
}
extern "C" {
    pub fn geo_as_ewkt(
        gs: *const GSERIALIZED,
        precision: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn geo_as_geojson(
        gs: *const GSERIALIZED,
        option: ::std::os::raw::c_int,
        precision: ::std::os::raw::c_int,
        srs: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn geo_as_hexewkb(
        gs: *const GSERIALIZED,
        endian: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn geo_as_text(
        gs: *const GSERIALIZED,
        precision: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn geo_from_ewkb(wkb: *const u8, wkb_size: usize, srid: int32) -> *mut GSERIALIZED;
}
extern "C" {
    pub fn geo_from_geojson(geojson: *const ::std::os::raw::c_char) -> *mut GSERIALIZED;
}
extern "C" {
    pub fn geo_out(gs: *const GSERIALIZED) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn geo_same(gs1: *const GSERIALIZED, gs2: *const GSERIALIZED) -> bool;
}
extern "C" {
    pub fn geography_from_hexewkb(wkt: *const ::std::os::raw::c_char) -> *mut GSERIALIZED;
}
extern "C" {
    pub fn geography_from_text(
        wkt: *mut ::std::os::raw::c_char,
        srid: ::std::os::raw::c_int,
    ) -> *mut GSERIALIZED;
}
extern "C" {
    pub fn geometry_from_hexewkb(wkt: *const ::std::os::raw::c_char) -> *mut GSERIALIZED;
}
extern "C" {
    pub fn geometry_from_text(
        wkt: *mut ::std::os::raw::c_char,
        srid: ::std::os::raw::c_int,
    ) -> *mut GSERIALIZED;
}
extern "C" {
    pub fn pgis_geography_in(str_: *mut ::std::os::raw::c_char, typmod: int32) -> *mut GSERIALIZED;
}
extern "C" {
    pub fn pgis_geometry_in(str_: *mut ::std::os::raw::c_char, typmod: int32) -> *mut GSERIALIZED;
}
extern "C" {
    pub fn bigintset_in(str_: *const ::std::os::raw::c_char) -> *mut Set;
}
extern "C" {
    pub fn bigintset_out(set: *const Set) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bigintspan_in(str_: *const ::std::os::raw::c_char) -> *mut Span;
}
extern "C" {
    pub fn bigintspan_out(s: *const Span) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bigintspanset_in(str_: *const ::std::os::raw::c_char) -> *mut SpanSet;
}
extern "C" {
    pub fn bigintspanset_out(ss: *const SpanSet) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dateset_in(str_: *const ::std::os::raw::c_char) -> *mut Set;
}
extern "C" {
    pub fn dateset_out(s: *const Set) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn datespan_in(str_: *const ::std::os::raw::c_char) -> *mut Span;
}
extern "C" {
    pub fn datespan_out(s: *const Span) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn datespanset_in(str_: *const ::std::os::raw::c_char) -> *mut SpanSet;
}
extern "C" {
    pub fn datespanset_out(ss: *const SpanSet) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn floatset_in(str_: *const ::std::os::raw::c_char) -> *mut Set;
}
extern "C" {
    pub fn floatset_out(
        set: *const Set,
        maxdd: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn floatspan_in(str_: *const ::std::os::raw::c_char) -> *mut Span;
}
extern "C" {
    pub fn floatspan_out(
        s: *const Span,
        maxdd: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn floatspanset_in(str_: *const ::std::os::raw::c_char) -> *mut SpanSet;
}
extern "C" {
    pub fn floatspanset_out(
        ss: *const SpanSet,
        maxdd: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn geogset_in(str_: *const ::std::os::raw::c_char) -> *mut Set;
}
extern "C" {
    pub fn geomset_in(str_: *const ::std::os::raw::c_char) -> *mut Set;
}
extern "C" {
    pub fn geoset_as_ewkt(
        set: *const Set,
        maxdd: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn geoset_as_text(
        set: *const Set,
        maxdd: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn geoset_out(set: *const Set, maxdd: ::std::os::raw::c_int)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn intset_in(str_: *const ::std::os::raw::c_char) -> *mut Set;
}
extern "C" {
    pub fn intset_out(set: *const Set) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn intspan_in(str_: *const ::std::os::raw::c_char) -> *mut Span;
}
extern "C" {
    pub fn intspan_out(s: *const Span) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn intspanset_in(str_: *const ::std::os::raw::c_char) -> *mut SpanSet;
}
extern "C" {
    pub fn intspanset_out(ss: *const SpanSet) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn set_as_hexwkb(
        s: *const Set,
        variant: u8,
        size_out: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn set_as_wkb(s: *const Set, variant: u8, size_out: *mut usize) -> *mut u8;
}
extern "C" {
    pub fn set_from_hexwkb(hexwkb: *const ::std::os::raw::c_char) -> *mut Set;
}
extern "C" {
    pub fn set_from_wkb(wkb: *const u8, size: usize) -> *mut Set;
}
extern "C" {
    pub fn span_as_hexwkb(
        s: *const Span,
        variant: u8,
        size_out: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn span_as_wkb(s: *const Span, variant: u8, size_out: *mut usize) -> *mut u8;
}
extern "C" {
    pub fn span_from_hexwkb(hexwkb: *const ::std::os::raw::c_char) -> *mut Span;
}
extern "C" {
    pub fn span_from_wkb(wkb: *const u8, size: usize) -> *mut Span;
}
extern "C" {
    pub fn spanset_as_hexwkb(
        ss: *const SpanSet,
        variant: u8,
        size_out: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn spanset_as_wkb(ss: *const SpanSet, variant: u8, size_out: *mut usize) -> *mut u8;
}
extern "C" {
    pub fn spanset_from_hexwkb(hexwkb: *const ::std::os::raw::c_char) -> *mut SpanSet;
}
extern "C" {
    pub fn spanset_from_wkb(wkb: *const u8, size: usize) -> *mut SpanSet;
}
extern "C" {
    pub fn textset_in(str_: *const ::std::os::raw::c_char) -> *mut Set;
}
extern "C" {
    pub fn textset_out(set: *const Set) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tstzset_in(str_: *const ::std::os::raw::c_char) -> *mut Set;
}
extern "C" {
    pub fn tstzset_out(set: *const Set) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tstzspan_in(str_: *const ::std::os::raw::c_char) -> *mut Span;
}
extern "C" {
    pub fn tstzspan_out(s: *const Span) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tstzspanset_in(str_: *const ::std::os::raw::c_char) -> *mut SpanSet;
}
extern "C" {
    pub fn tstzspanset_out(ss: *const SpanSet) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bigintset_make(values: *const int64, count: ::std::os::raw::c_int) -> *mut Set;
}
extern "C" {
    pub fn bigintspan_make(
        lower: int64,
        upper: int64,
        lower_inc: bool,
        upper_inc: bool,
    ) -> *mut Span;
}
extern "C" {
    pub fn dateset_make(values: *const DateADT, count: ::std::os::raw::c_int) -> *mut Set;
}
extern "C" {
    pub fn datespan_make(
        lower: DateADT,
        upper: DateADT,
        lower_inc: bool,
        upper_inc: bool,
    ) -> *mut Span;
}
extern "C" {
    pub fn floatset_make(values: *const f64, count: ::std::os::raw::c_int) -> *mut Set;
}
extern "C" {
    pub fn floatspan_make(lower: f64, upper: f64, lower_inc: bool, upper_inc: bool) -> *mut Span;
}
extern "C" {
    pub fn geoset_make(values: *mut *const GSERIALIZED, count: ::std::os::raw::c_int) -> *mut Set;
}
extern "C" {
    pub fn intset_make(
        values: *const ::std::os::raw::c_int,
        count: ::std::os::raw::c_int,
    ) -> *mut Set;
}
extern "C" {
    pub fn intspan_make(
        lower: ::std::os::raw::c_int,
        upper: ::std::os::raw::c_int,
        lower_inc: bool,
        upper_inc: bool,
    ) -> *mut Span;
}
extern "C" {
    pub fn set_copy(s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn span_copy(s: *const Span) -> *mut Span;
}
extern "C" {
    pub fn spanset_copy(ss: *const SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn spanset_make(
        spans: *mut Span,
        count: ::std::os::raw::c_int,
        normalize: bool,
        order: bool,
    ) -> *mut SpanSet;
}
extern "C" {
    pub fn textset_make(values: *mut *const text, count: ::std::os::raw::c_int) -> *mut Set;
}
extern "C" {
    pub fn tstzset_make(values: *const TimestampTz, count: ::std::os::raw::c_int) -> *mut Set;
}
extern "C" {
    pub fn tstzspan_make(
        lower: TimestampTz,
        upper: TimestampTz,
        lower_inc: bool,
        upper_inc: bool,
    ) -> *mut Span;
}
extern "C" {
    pub fn bigint_to_set(i: int64) -> *mut Set;
}
extern "C" {
    pub fn bigint_to_span(i: ::std::os::raw::c_int) -> *mut Span;
}
extern "C" {
    pub fn bigint_to_spanset(i: ::std::os::raw::c_int) -> *mut SpanSet;
}
extern "C" {
    pub fn date_to_set(d: DateADT) -> *mut Set;
}
extern "C" {
    pub fn date_to_span(d: DateADT) -> *mut Span;
}
extern "C" {
    pub fn date_to_spanset(d: DateADT) -> *mut SpanSet;
}
extern "C" {
    pub fn dateset_to_tstzset(s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn datespan_to_tstzspan(s: *const Span) -> *mut Span;
}
extern "C" {
    pub fn datespanset_to_tstzspanset(ss: *const SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn float_to_set(d: f64) -> *mut Set;
}
extern "C" {
    pub fn float_to_span(d: f64) -> *mut Span;
}
extern "C" {
    pub fn float_to_spanset(d: f64) -> *mut SpanSet;
}
extern "C" {
    pub fn floatset_to_intset(s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn floatspan_to_intspan(s: *const Span) -> *mut Span;
}
extern "C" {
    pub fn floatspanset_to_intspanset(ss: *const SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn geo_to_set(gs: *mut GSERIALIZED) -> *mut Set;
}
extern "C" {
    pub fn int_to_set(i: ::std::os::raw::c_int) -> *mut Set;
}
extern "C" {
    pub fn int_to_span(i: ::std::os::raw::c_int) -> *mut Span;
}
extern "C" {
    pub fn int_to_spanset(i: ::std::os::raw::c_int) -> *mut SpanSet;
}
extern "C" {
    pub fn intset_to_floatset(s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn intspan_to_floatspan(s: *const Span) -> *mut Span;
}
extern "C" {
    pub fn intspanset_to_floatspanset(ss: *const SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn set_to_spanset(s: *const Set) -> *mut SpanSet;
}
extern "C" {
    pub fn span_to_spanset(s: *const Span) -> *mut SpanSet;
}
extern "C" {
    pub fn text_to_set(txt: *mut text) -> *mut Set;
}
extern "C" {
    pub fn timestamptz_to_set(t: TimestampTz) -> *mut Set;
}
extern "C" {
    pub fn timestamptz_to_span(t: TimestampTz) -> *mut Span;
}
extern "C" {
    pub fn timestamptz_to_spanset(t: TimestampTz) -> *mut SpanSet;
}
extern "C" {
    pub fn tstzset_to_dateset(s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn tstzspan_to_datespan(s: *const Span) -> *mut Span;
}
extern "C" {
    pub fn tstzspanset_to_datespanset(ss: *const SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn bigintset_end_value(s: *const Set) -> int64;
}
extern "C" {
    pub fn bigintset_start_value(s: *const Set) -> int64;
}
extern "C" {
    pub fn bigintset_value_n(s: *const Set, n: ::std::os::raw::c_int, result: *mut int64) -> bool;
}
extern "C" {
    pub fn bigintset_values(s: *const Set) -> *mut int64;
}
extern "C" {
    pub fn bigintspan_lower(s: *const Span) -> int64;
}
extern "C" {
    pub fn bigintspan_upper(s: *const Span) -> int64;
}
extern "C" {
    pub fn bigintspan_width(s: *const Span) -> int64;
}
extern "C" {
    pub fn bigintspanset_lower(ss: *const SpanSet) -> int64;
}
extern "C" {
    pub fn bigintspanset_upper(ss: *const SpanSet) -> int64;
}
extern "C" {
    pub fn bigintspanset_width(ss: *const SpanSet, boundspan: bool) -> int64;
}
extern "C" {
    pub fn dateset_end_value(s: *const Set) -> DateADT;
}
extern "C" {
    pub fn dateset_start_value(s: *const Set) -> DateADT;
}
extern "C" {
    pub fn dateset_value_n(s: *const Set, n: ::std::os::raw::c_int, result: *mut DateADT) -> bool;
}
extern "C" {
    pub fn dateset_values(s: *const Set) -> *mut DateADT;
}
extern "C" {
    pub fn datespan_duration(s: *const Span) -> *mut Interval;
}
extern "C" {
    pub fn datespan_lower(s: *const Span) -> DateADT;
}
extern "C" {
    pub fn datespan_upper(s: *const Span) -> DateADT;
}
extern "C" {
    pub fn datespanset_date_n(
        ss: *const SpanSet,
        n: ::std::os::raw::c_int,
        result: *mut DateADT,
    ) -> bool;
}
extern "C" {
    pub fn datespanset_dates(ss: *const SpanSet) -> *mut Set;
}
extern "C" {
    pub fn datespanset_duration(ss: *const SpanSet, boundspan: bool) -> *mut Interval;
}
extern "C" {
    pub fn datespanset_end_date(ss: *const SpanSet) -> DateADT;
}
extern "C" {
    pub fn datespanset_num_dates(ss: *const SpanSet) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn datespanset_start_date(ss: *const SpanSet) -> DateADT;
}
extern "C" {
    pub fn floatset_end_value(s: *const Set) -> f64;
}
extern "C" {
    pub fn floatset_start_value(s: *const Set) -> f64;
}
extern "C" {
    pub fn floatset_value_n(s: *const Set, n: ::std::os::raw::c_int, result: *mut f64) -> bool;
}
extern "C" {
    pub fn floatset_values(s: *const Set) -> *mut f64;
}
extern "C" {
    pub fn floatspan_lower(s: *const Span) -> f64;
}
extern "C" {
    pub fn floatspan_upper(s: *const Span) -> f64;
}
extern "C" {
    pub fn floatspan_width(s: *const Span) -> f64;
}
extern "C" {
    pub fn floatspanset_lower(ss: *const SpanSet) -> f64;
}
extern "C" {
    pub fn floatspanset_upper(ss: *const SpanSet) -> f64;
}
extern "C" {
    pub fn floatspanset_width(ss: *const SpanSet, boundspan: bool) -> f64;
}
extern "C" {
    pub fn geoset_end_value(s: *const Set) -> *mut GSERIALIZED;
}
extern "C" {
    pub fn geoset_srid(s: *const Set) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn geoset_start_value(s: *const Set) -> *mut GSERIALIZED;
}
extern "C" {
    pub fn geoset_value_n(
        s: *const Set,
        n: ::std::os::raw::c_int,
        result: *mut *mut GSERIALIZED,
    ) -> bool;
}
extern "C" {
    pub fn geoset_values(s: *const Set) -> *mut *mut GSERIALIZED;
}
extern "C" {
    pub fn intset_end_value(s: *const Set) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn intset_start_value(s: *const Set) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn intset_value_n(
        s: *const Set,
        n: ::std::os::raw::c_int,
        result: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn intset_values(s: *const Set) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn intspan_lower(s: *const Span) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn intspan_upper(s: *const Span) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn intspan_width(s: *const Span) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn intspanset_lower(ss: *const SpanSet) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn intspanset_upper(ss: *const SpanSet) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn intspanset_width(ss: *const SpanSet, boundspan: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_hash(s: *const Set) -> uint32;
}
extern "C" {
    pub fn set_hash_extended(s: *const Set, seed: uint64) -> uint64;
}
extern "C" {
    pub fn set_num_values(s: *const Set) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_to_span(s: *const Set) -> *mut Span;
}
extern "C" {
    pub fn span_hash(s: *const Span) -> uint32;
}
extern "C" {
    pub fn span_hash_extended(s: *const Span, seed: uint64) -> uint64;
}
extern "C" {
    pub fn span_lower_inc(s: *const Span) -> bool;
}
extern "C" {
    pub fn span_upper_inc(s: *const Span) -> bool;
}
extern "C" {
    pub fn spanset_end_span(ss: *const SpanSet) -> *mut Span;
}
extern "C" {
    pub fn spanset_hash(ss: *const SpanSet) -> uint32;
}
extern "C" {
    pub fn spanset_hash_extended(ss: *const SpanSet, seed: uint64) -> uint64;
}
extern "C" {
    pub fn spanset_lower_inc(ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn spanset_num_spans(ss: *const SpanSet) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spanset_span(ss: *const SpanSet) -> *mut Span;
}
extern "C" {
    pub fn spanset_span_n(ss: *const SpanSet, i: ::std::os::raw::c_int) -> *mut Span;
}
extern "C" {
    pub fn spanset_spanarr(ss: *const SpanSet) -> *mut *mut Span;
}
extern "C" {
    pub fn spanset_start_span(ss: *const SpanSet) -> *mut Span;
}
extern "C" {
    pub fn spanset_upper_inc(ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn textset_end_value(s: *const Set) -> *mut text;
}
extern "C" {
    pub fn textset_start_value(s: *const Set) -> *mut text;
}
extern "C" {
    pub fn textset_value_n(s: *const Set, n: ::std::os::raw::c_int, result: *mut *mut text)
        -> bool;
}
extern "C" {
    pub fn textset_values(s: *const Set) -> *mut *mut text;
}
extern "C" {
    pub fn tstzset_end_value(s: *const Set) -> TimestampTz;
}
extern "C" {
    pub fn tstzset_start_value(s: *const Set) -> TimestampTz;
}
extern "C" {
    pub fn tstzset_value_n(
        s: *const Set,
        n: ::std::os::raw::c_int,
        result: *mut TimestampTz,
    ) -> bool;
}
extern "C" {
    pub fn tstzset_values(s: *const Set) -> *mut TimestampTz;
}
extern "C" {
    pub fn tstzspan_duration(s: *const Span) -> *mut Interval;
}
extern "C" {
    pub fn tstzspan_lower(s: *const Span) -> TimestampTz;
}
extern "C" {
    pub fn tstzspan_upper(s: *const Span) -> TimestampTz;
}
extern "C" {
    pub fn tstzspanset_duration(ss: *const SpanSet, boundspan: bool) -> *mut Interval;
}
extern "C" {
    pub fn tstzspanset_end_timestamptz(ss: *const SpanSet) -> TimestampTz;
}
extern "C" {
    pub fn tstzspanset_lower(ss: *const SpanSet) -> TimestampTz;
}
extern "C" {
    pub fn tstzspanset_num_timestamps(ss: *const SpanSet) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tstzspanset_start_timestamptz(ss: *const SpanSet) -> TimestampTz;
}
extern "C" {
    pub fn tstzspanset_timestamptz_n(
        ss: *const SpanSet,
        n: ::std::os::raw::c_int,
        result: *mut TimestampTz,
    ) -> bool;
}
extern "C" {
    pub fn tstzspanset_timestamps(ss: *const SpanSet) -> *mut Set;
}
extern "C" {
    pub fn tstzspanset_upper(ss: *const SpanSet) -> TimestampTz;
}
extern "C" {
    pub fn bigintset_shift_scale(
        s: *const Set,
        shift: int64,
        width: int64,
        hasshift: bool,
        haswidth: bool,
    ) -> *mut Set;
}
extern "C" {
    pub fn bigintspan_shift_scale(
        s: *const Span,
        shift: int64,
        width: int64,
        hasshift: bool,
        haswidth: bool,
    ) -> *mut Span;
}
extern "C" {
    pub fn bigintspanset_shift_scale(
        ss: *const SpanSet,
        shift: int64,
        width: int64,
        hasshift: bool,
        haswidth: bool,
    ) -> *mut SpanSet;
}
extern "C" {
    pub fn dateset_shift_scale(
        s: *const Set,
        shift: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        hasshift: bool,
        haswidth: bool,
    ) -> *mut Set;
}
extern "C" {
    pub fn datespan_shift_scale(
        s: *const Span,
        shift: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        hasshift: bool,
        haswidth: bool,
    ) -> *mut Span;
}
extern "C" {
    pub fn datespanset_shift_scale(
        ss: *const SpanSet,
        shift: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        hasshift: bool,
        haswidth: bool,
    ) -> *mut SpanSet;
}
extern "C" {
    pub fn floatset_ceil(s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn floatset_floor(s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn floatset_degrees(s: *const Set, normalize: bool) -> *mut Set;
}
extern "C" {
    pub fn floatset_radians(s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn floatset_round(s: *const Set, maxdd: ::std::os::raw::c_int) -> *mut Set;
}
extern "C" {
    pub fn floatset_shift_scale(
        s: *const Set,
        shift: f64,
        width: f64,
        hasshift: bool,
        haswidth: bool,
    ) -> *mut Set;
}
extern "C" {
    pub fn floatspan_ceil(s: *const Span) -> *mut Span;
}
extern "C" {
    pub fn floatspan_floor(s: *const Span) -> *mut Span;
}
extern "C" {
    pub fn floatspan_round(s: *const Span, maxdd: ::std::os::raw::c_int) -> *mut Span;
}
extern "C" {
    pub fn floatspan_shift_scale(
        s: *const Span,
        shift: f64,
        width: f64,
        hasshift: bool,
        haswidth: bool,
    ) -> *mut Span;
}
extern "C" {
    pub fn floatspanset_ceil(ss: *const SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn floatspanset_floor(ss: *const SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn floatspanset_round(ss: *const SpanSet, maxdd: ::std::os::raw::c_int) -> *mut SpanSet;
}
extern "C" {
    pub fn floatspanset_shift_scale(
        ss: *const SpanSet,
        shift: f64,
        width: f64,
        hasshift: bool,
        haswidth: bool,
    ) -> *mut SpanSet;
}
extern "C" {
    pub fn geoset_round(s: *const Set, maxdd: ::std::os::raw::c_int) -> *mut Set;
}
extern "C" {
    pub fn geoset_set_srid(s: *const Set, srid: int32) -> *mut Set;
}
extern "C" {
    pub fn geoset_transform(s: *const Set, srid: int32) -> *mut Set;
}
extern "C" {
    pub fn geoset_transform_pipeline(
        s: *const Set,
        pipelinestr: *const ::std::os::raw::c_char,
        srid: int32,
        is_forward: bool,
    ) -> *mut Set;
}
extern "C" {
    pub fn intset_shift_scale(
        s: *const Set,
        shift: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        hasshift: bool,
        haswidth: bool,
    ) -> *mut Set;
}
extern "C" {
    pub fn intspan_shift_scale(
        s: *const Span,
        shift: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        hasshift: bool,
        haswidth: bool,
    ) -> *mut Span;
}
extern "C" {
    pub fn intspanset_shift_scale(
        ss: *const SpanSet,
        shift: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        hasshift: bool,
        haswidth: bool,
    ) -> *mut SpanSet;
}
extern "C" {
    pub fn point_transform(gs: *const GSERIALIZED, srid: int32) -> *mut GSERIALIZED;
}
extern "C" {
    pub fn point_transform_pipeline(
        gs: *const GSERIALIZED,
        pipelinestr: *const ::std::os::raw::c_char,
        srid: int32,
        is_forward: bool,
    ) -> *mut GSERIALIZED;
}
extern "C" {
    pub fn set_spans(s: *const Set) -> *mut Span;
}
extern "C" {
    pub fn set_split_each_n_spans(
        s: *const Set,
        elem_count: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn set_split_n_spans(
        s: *const Set,
        span_count: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn spanset_spans(ss: *const SpanSet) -> *mut Span;
}
extern "C" {
    pub fn spanset_split_each_n_spans(
        ss: *const SpanSet,
        elem_count: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn spanset_split_n_spans(
        ss: *const SpanSet,
        span_count: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn textset_initcap(s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn textset_lower(s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn textset_upper(s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn textcat_textset_text(s: *const Set, txt: *const text) -> *mut Set;
}
extern "C" {
    pub fn textcat_text_textset(txt: *const text, s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn timestamptz_tprecision(
        t: TimestampTz,
        duration: *const Interval,
        torigin: TimestampTz,
    ) -> TimestampTz;
}
extern "C" {
    pub fn tstzset_shift_scale(
        s: *const Set,
        shift: *const Interval,
        duration: *const Interval,
    ) -> *mut Set;
}
extern "C" {
    pub fn tstzset_tprecision(
        s: *const Set,
        duration: *const Interval,
        torigin: TimestampTz,
    ) -> *mut Set;
}
extern "C" {
    pub fn tstzspan_shift_scale(
        s: *const Span,
        shift: *const Interval,
        duration: *const Interval,
    ) -> *mut Span;
}
extern "C" {
    pub fn tstzspan_tprecision(
        s: *const Span,
        duration: *const Interval,
        torigin: TimestampTz,
    ) -> *mut Span;
}
extern "C" {
    pub fn tstzspanset_shift_scale(
        ss: *const SpanSet,
        shift: *const Interval,
        duration: *const Interval,
    ) -> *mut SpanSet;
}
extern "C" {
    pub fn tstzspanset_tprecision(
        ss: *const SpanSet,
        duration: *const Interval,
        torigin: TimestampTz,
    ) -> *mut SpanSet;
}
extern "C" {
    pub fn set_cmp(s1: *const Set, s2: *const Set) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_eq(s1: *const Set, s2: *const Set) -> bool;
}
extern "C" {
    pub fn set_ge(s1: *const Set, s2: *const Set) -> bool;
}
extern "C" {
    pub fn set_gt(s1: *const Set, s2: *const Set) -> bool;
}
extern "C" {
    pub fn set_le(s1: *const Set, s2: *const Set) -> bool;
}
extern "C" {
    pub fn set_lt(s1: *const Set, s2: *const Set) -> bool;
}
extern "C" {
    pub fn set_ne(s1: *const Set, s2: *const Set) -> bool;
}
extern "C" {
    pub fn span_cmp(s1: *const Span, s2: *const Span) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn span_eq(s1: *const Span, s2: *const Span) -> bool;
}
extern "C" {
    pub fn span_ge(s1: *const Span, s2: *const Span) -> bool;
}
extern "C" {
    pub fn span_gt(s1: *const Span, s2: *const Span) -> bool;
}
extern "C" {
    pub fn span_le(s1: *const Span, s2: *const Span) -> bool;
}
extern "C" {
    pub fn span_lt(s1: *const Span, s2: *const Span) -> bool;
}
extern "C" {
    pub fn span_ne(s1: *const Span, s2: *const Span) -> bool;
}
extern "C" {
    pub fn spanset_cmp(ss1: *const SpanSet, ss2: *const SpanSet) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spanset_eq(ss1: *const SpanSet, ss2: *const SpanSet) -> bool;
}
extern "C" {
    pub fn spanset_ge(ss1: *const SpanSet, ss2: *const SpanSet) -> bool;
}
extern "C" {
    pub fn spanset_gt(ss1: *const SpanSet, ss2: *const SpanSet) -> bool;
}
extern "C" {
    pub fn spanset_le(ss1: *const SpanSet, ss2: *const SpanSet) -> bool;
}
extern "C" {
    pub fn spanset_lt(ss1: *const SpanSet, ss2: *const SpanSet) -> bool;
}
extern "C" {
    pub fn spanset_ne(ss1: *const SpanSet, ss2: *const SpanSet) -> bool;
}
extern "C" {
    pub fn adjacent_span_bigint(s: *const Span, i: int64) -> bool;
}
extern "C" {
    pub fn adjacent_span_date(s: *const Span, d: DateADT) -> bool;
}
extern "C" {
    pub fn adjacent_span_float(s: *const Span, d: f64) -> bool;
}
extern "C" {
    pub fn adjacent_span_int(s: *const Span, i: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn adjacent_span_span(s1: *const Span, s2: *const Span) -> bool;
}
extern "C" {
    pub fn adjacent_span_spanset(s: *const Span, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn adjacent_span_timestamptz(s: *const Span, t: TimestampTz) -> bool;
}
extern "C" {
    pub fn adjacent_spanset_bigint(ss: *const SpanSet, i: int64) -> bool;
}
extern "C" {
    pub fn adjacent_spanset_date(ss: *const SpanSet, d: DateADT) -> bool;
}
extern "C" {
    pub fn adjacent_spanset_float(ss: *const SpanSet, d: f64) -> bool;
}
extern "C" {
    pub fn adjacent_spanset_int(ss: *const SpanSet, i: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn adjacent_spanset_timestamptz(ss: *const SpanSet, t: TimestampTz) -> bool;
}
extern "C" {
    pub fn adjacent_spanset_span(ss: *const SpanSet, s: *const Span) -> bool;
}
extern "C" {
    pub fn adjacent_spanset_spanset(ss1: *const SpanSet, ss2: *const SpanSet) -> bool;
}
extern "C" {
    pub fn contained_bigint_set(i: int64, s: *const Set) -> bool;
}
extern "C" {
    pub fn contained_bigint_span(i: int64, s: *const Span) -> bool;
}
extern "C" {
    pub fn contained_bigint_spanset(i: int64, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn contained_date_set(d: DateADT, s: *const Set) -> bool;
}
extern "C" {
    pub fn contained_date_span(d: DateADT, s: *const Span) -> bool;
}
extern "C" {
    pub fn contained_date_spanset(d: DateADT, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn contained_float_set(d: f64, s: *const Set) -> bool;
}
extern "C" {
    pub fn contained_float_span(d: f64, s: *const Span) -> bool;
}
extern "C" {
    pub fn contained_float_spanset(d: f64, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn contained_geo_set(gs: *mut GSERIALIZED, s: *const Set) -> bool;
}
extern "C" {
    pub fn contained_int_set(i: ::std::os::raw::c_int, s: *const Set) -> bool;
}
extern "C" {
    pub fn contained_int_span(i: ::std::os::raw::c_int, s: *const Span) -> bool;
}
extern "C" {
    pub fn contained_int_spanset(i: ::std::os::raw::c_int, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn contained_set_set(s1: *const Set, s2: *const Set) -> bool;
}
extern "C" {
    pub fn contained_span_span(s1: *const Span, s2: *const Span) -> bool;
}
extern "C" {
    pub fn contained_span_spanset(s: *const Span, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn contained_spanset_span(ss: *const SpanSet, s: *const Span) -> bool;
}
extern "C" {
    pub fn contained_spanset_spanset(ss1: *const SpanSet, ss2: *const SpanSet) -> bool;
}
extern "C" {
    pub fn contained_text_set(txt: *mut text, s: *const Set) -> bool;
}
extern "C" {
    pub fn contained_timestamptz_set(t: TimestampTz, s: *const Set) -> bool;
}
extern "C" {
    pub fn contained_timestamptz_span(t: TimestampTz, s: *const Span) -> bool;
}
extern "C" {
    pub fn contained_timestamptz_spanset(t: TimestampTz, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn contains_set_bigint(s: *const Set, i: int64) -> bool;
}
extern "C" {
    pub fn contains_set_date(s: *const Set, d: DateADT) -> bool;
}
extern "C" {
    pub fn contains_set_float(s: *const Set, d: f64) -> bool;
}
extern "C" {
    pub fn contains_set_geo(s: *const Set, gs: *mut GSERIALIZED) -> bool;
}
extern "C" {
    pub fn contains_set_int(s: *const Set, i: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn contains_set_set(s1: *const Set, s2: *const Set) -> bool;
}
extern "C" {
    pub fn contains_set_text(s: *const Set, t: *mut text) -> bool;
}
extern "C" {
    pub fn contains_set_timestamptz(s: *const Set, t: TimestampTz) -> bool;
}
extern "C" {
    pub fn contains_span_bigint(s: *const Span, i: int64) -> bool;
}
extern "C" {
    pub fn contains_span_date(s: *const Span, d: DateADT) -> bool;
}
extern "C" {
    pub fn contains_span_float(s: *const Span, d: f64) -> bool;
}
extern "C" {
    pub fn contains_span_int(s: *const Span, i: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn contains_span_span(s1: *const Span, s2: *const Span) -> bool;
}
extern "C" {
    pub fn contains_span_spanset(s: *const Span, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn contains_span_timestamptz(s: *const Span, t: TimestampTz) -> bool;
}
extern "C" {
    pub fn contains_spanset_bigint(ss: *const SpanSet, i: int64) -> bool;
}
extern "C" {
    pub fn contains_spanset_date(ss: *const SpanSet, d: DateADT) -> bool;
}
extern "C" {
    pub fn contains_spanset_float(ss: *const SpanSet, d: f64) -> bool;
}
extern "C" {
    pub fn contains_spanset_int(ss: *const SpanSet, i: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn contains_spanset_span(ss: *const SpanSet, s: *const Span) -> bool;
}
extern "C" {
    pub fn contains_spanset_spanset(ss1: *const SpanSet, ss2: *const SpanSet) -> bool;
}
extern "C" {
    pub fn contains_spanset_timestamptz(ss: *const SpanSet, t: TimestampTz) -> bool;
}
extern "C" {
    pub fn overlaps_set_set(s1: *const Set, s2: *const Set) -> bool;
}
extern "C" {
    pub fn overlaps_span_span(s1: *const Span, s2: *const Span) -> bool;
}
extern "C" {
    pub fn overlaps_span_spanset(s: *const Span, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn overlaps_spanset_span(ss: *const SpanSet, s: *const Span) -> bool;
}
extern "C" {
    pub fn overlaps_spanset_spanset(ss1: *const SpanSet, ss2: *const SpanSet) -> bool;
}
extern "C" {
    pub fn after_date_set(d: DateADT, s: *const Set) -> bool;
}
extern "C" {
    pub fn after_date_span(d: DateADT, s: *const Span) -> bool;
}
extern "C" {
    pub fn after_date_spanset(d: DateADT, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn after_set_date(s: *const Set, d: DateADT) -> bool;
}
extern "C" {
    pub fn after_set_timestamptz(s: *const Set, t: TimestampTz) -> bool;
}
extern "C" {
    pub fn after_span_date(s: *const Span, d: DateADT) -> bool;
}
extern "C" {
    pub fn after_span_timestamptz(s: *const Span, t: TimestampTz) -> bool;
}
extern "C" {
    pub fn after_spanset_date(ss: *const SpanSet, d: DateADT) -> bool;
}
extern "C" {
    pub fn after_spanset_timestamptz(ss: *const SpanSet, t: TimestampTz) -> bool;
}
extern "C" {
    pub fn after_timestamptz_set(t: TimestampTz, s: *const Set) -> bool;
}
extern "C" {
    pub fn after_timestamptz_span(t: TimestampTz, s: *const Span) -> bool;
}
extern "C" {
    pub fn after_timestamptz_spanset(t: TimestampTz, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn before_date_set(d: DateADT, s: *const Set) -> bool;
}
extern "C" {
    pub fn before_date_span(d: DateADT, s: *const Span) -> bool;
}
extern "C" {
    pub fn before_date_spanset(d: DateADT, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn before_set_date(s: *const Set, d: DateADT) -> bool;
}
extern "C" {
    pub fn before_set_timestamptz(s: *const Set, t: TimestampTz) -> bool;
}
extern "C" {
    pub fn before_span_date(s: *const Span, d: DateADT) -> bool;
}
extern "C" {
    pub fn before_span_timestamptz(s: *const Span, t: TimestampTz) -> bool;
}
extern "C" {
    pub fn before_spanset_date(ss: *const SpanSet, d: DateADT) -> bool;
}
extern "C" {
    pub fn before_spanset_timestamptz(ss: *const SpanSet, t: TimestampTz) -> bool;
}
extern "C" {
    pub fn before_timestamptz_set(t: TimestampTz, s: *const Set) -> bool;
}
extern "C" {
    pub fn before_timestamptz_span(t: TimestampTz, s: *const Span) -> bool;
}
extern "C" {
    pub fn before_timestamptz_spanset(t: TimestampTz, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn left_bigint_set(i: int64, s: *const Set) -> bool;
}
extern "C" {
    pub fn left_bigint_span(i: int64, s: *const Span) -> bool;
}
extern "C" {
    pub fn left_bigint_spanset(i: int64, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn left_float_set(d: f64, s: *const Set) -> bool;
}
extern "C" {
    pub fn left_float_span(d: f64, s: *const Span) -> bool;
}
extern "C" {
    pub fn left_float_spanset(d: f64, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn left_int_set(i: ::std::os::raw::c_int, s: *const Set) -> bool;
}
extern "C" {
    pub fn left_int_span(i: ::std::os::raw::c_int, s: *const Span) -> bool;
}
extern "C" {
    pub fn left_int_spanset(i: ::std::os::raw::c_int, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn left_set_bigint(s: *const Set, i: int64) -> bool;
}
extern "C" {
    pub fn left_set_float(s: *const Set, d: f64) -> bool;
}
extern "C" {
    pub fn left_set_int(s: *const Set, i: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn left_set_set(s1: *const Set, s2: *const Set) -> bool;
}
extern "C" {
    pub fn left_set_text(s: *const Set, txt: *mut text) -> bool;
}
extern "C" {
    pub fn left_span_bigint(s: *const Span, i: int64) -> bool;
}
extern "C" {
    pub fn left_span_float(s: *const Span, d: f64) -> bool;
}
extern "C" {
    pub fn left_span_int(s: *const Span, i: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn left_span_span(s1: *const Span, s2: *const Span) -> bool;
}
extern "C" {
    pub fn left_span_spanset(s: *const Span, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn left_spanset_bigint(ss: *const SpanSet, i: int64) -> bool;
}
extern "C" {
    pub fn left_spanset_float(ss: *const SpanSet, d: f64) -> bool;
}
extern "C" {
    pub fn left_spanset_int(ss: *const SpanSet, i: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn left_spanset_span(ss: *const SpanSet, s: *const Span) -> bool;
}
extern "C" {
    pub fn left_spanset_spanset(ss1: *const SpanSet, ss2: *const SpanSet) -> bool;
}
extern "C" {
    pub fn left_text_set(txt: *mut text, s: *const Set) -> bool;
}
extern "C" {
    pub fn overafter_date_set(d: DateADT, s: *const Set) -> bool;
}
extern "C" {
    pub fn overafter_date_span(d: DateADT, s: *const Span) -> bool;
}
extern "C" {
    pub fn overafter_date_spanset(d: DateADT, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn overafter_set_date(s: *const Set, d: DateADT) -> bool;
}
extern "C" {
    pub fn overafter_set_timestamptz(s: *const Set, t: TimestampTz) -> bool;
}
extern "C" {
    pub fn overafter_span_date(s: *const Span, d: DateADT) -> bool;
}
extern "C" {
    pub fn overafter_span_timestamptz(s: *const Span, t: TimestampTz) -> bool;
}
extern "C" {
    pub fn overafter_spanset_date(ss: *const SpanSet, d: DateADT) -> bool;
}
extern "C" {
    pub fn overafter_spanset_timestamptz(ss: *const SpanSet, t: TimestampTz) -> bool;
}
extern "C" {
    pub fn overafter_timestamptz_set(t: TimestampTz, s: *const Set) -> bool;
}
extern "C" {
    pub fn overafter_timestamptz_span(t: TimestampTz, s: *const Span) -> bool;
}
extern "C" {
    pub fn overafter_timestamptz_spanset(t: TimestampTz, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn overbefore_date_set(d: DateADT, s: *const Set) -> bool;
}
extern "C" {
    pub fn overbefore_date_span(d: DateADT, s: *const Span) -> bool;
}
extern "C" {
    pub fn overbefore_date_spanset(d: DateADT, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn overbefore_set_date(s: *const Set, d: DateADT) -> bool;
}
extern "C" {
    pub fn overbefore_set_timestamptz(s: *const Set, t: TimestampTz) -> bool;
}
extern "C" {
    pub fn overbefore_span_date(s: *const Span, d: DateADT) -> bool;
}
extern "C" {
    pub fn overbefore_span_timestamptz(s: *const Span, t: TimestampTz) -> bool;
}
extern "C" {
    pub fn overbefore_spanset_date(ss: *const SpanSet, d: DateADT) -> bool;
}
extern "C" {
    pub fn overbefore_spanset_timestamptz(ss: *const SpanSet, t: TimestampTz) -> bool;
}
extern "C" {
    pub fn overbefore_timestamptz_set(t: TimestampTz, s: *const Set) -> bool;
}
extern "C" {
    pub fn overbefore_timestamptz_span(t: TimestampTz, s: *const Span) -> bool;
}
extern "C" {
    pub fn overbefore_timestamptz_spanset(t: TimestampTz, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn overleft_bigint_set(i: int64, s: *const Set) -> bool;
}
extern "C" {
    pub fn overleft_bigint_span(i: int64, s: *const Span) -> bool;
}
extern "C" {
    pub fn overleft_bigint_spanset(i: int64, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn overleft_float_set(d: f64, s: *const Set) -> bool;
}
extern "C" {
    pub fn overleft_float_span(d: f64, s: *const Span) -> bool;
}
extern "C" {
    pub fn overleft_float_spanset(d: f64, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn overleft_int_set(i: ::std::os::raw::c_int, s: *const Set) -> bool;
}
extern "C" {
    pub fn overleft_int_span(i: ::std::os::raw::c_int, s: *const Span) -> bool;
}
extern "C" {
    pub fn overleft_int_spanset(i: ::std::os::raw::c_int, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn overleft_set_bigint(s: *const Set, i: int64) -> bool;
}
extern "C" {
    pub fn overleft_set_float(s: *const Set, d: f64) -> bool;
}
extern "C" {
    pub fn overleft_set_int(s: *const Set, i: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn overleft_set_set(s1: *const Set, s2: *const Set) -> bool;
}
extern "C" {
    pub fn overleft_set_text(s: *const Set, txt: *mut text) -> bool;
}
extern "C" {
    pub fn overleft_span_bigint(s: *const Span, i: int64) -> bool;
}
extern "C" {
    pub fn overleft_span_float(s: *const Span, d: f64) -> bool;
}
extern "C" {
    pub fn overleft_span_int(s: *const Span, i: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn overleft_span_span(s1: *const Span, s2: *const Span) -> bool;
}
extern "C" {
    pub fn overleft_span_spanset(s: *const Span, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn overleft_spanset_bigint(ss: *const SpanSet, i: int64) -> bool;
}
extern "C" {
    pub fn overleft_spanset_float(ss: *const SpanSet, d: f64) -> bool;
}
extern "C" {
    pub fn overleft_spanset_int(ss: *const SpanSet, i: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn overleft_spanset_span(ss: *const SpanSet, s: *const Span) -> bool;
}
extern "C" {
    pub fn overleft_spanset_spanset(ss1: *const SpanSet, ss2: *const SpanSet) -> bool;
}
extern "C" {
    pub fn overleft_text_set(txt: *mut text, s: *const Set) -> bool;
}
extern "C" {
    pub fn overright_bigint_set(i: int64, s: *const Set) -> bool;
}
extern "C" {
    pub fn overright_bigint_span(i: int64, s: *const Span) -> bool;
}
extern "C" {
    pub fn overright_bigint_spanset(i: int64, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn overright_float_set(d: f64, s: *const Set) -> bool;
}
extern "C" {
    pub fn overright_float_span(d: f64, s: *const Span) -> bool;
}
extern "C" {
    pub fn overright_float_spanset(d: f64, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn overright_int_set(i: ::std::os::raw::c_int, s: *const Set) -> bool;
}
extern "C" {
    pub fn overright_int_span(i: ::std::os::raw::c_int, s: *const Span) -> bool;
}
extern "C" {
    pub fn overright_int_spanset(i: ::std::os::raw::c_int, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn overright_set_bigint(s: *const Set, i: int64) -> bool;
}
extern "C" {
    pub fn overright_set_float(s: *const Set, d: f64) -> bool;
}
extern "C" {
    pub fn overright_set_int(s: *const Set, i: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn overright_set_set(s1: *const Set, s2: *const Set) -> bool;
}
extern "C" {
    pub fn overright_set_text(s: *const Set, txt: *mut text) -> bool;
}
extern "C" {
    pub fn overright_span_bigint(s: *const Span, i: int64) -> bool;
}
extern "C" {
    pub fn overright_span_float(s: *const Span, d: f64) -> bool;
}
extern "C" {
    pub fn overright_span_int(s: *const Span, i: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn overright_span_span(s1: *const Span, s2: *const Span) -> bool;
}
extern "C" {
    pub fn overright_span_spanset(s: *const Span, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn overright_spanset_bigint(ss: *const SpanSet, i: int64) -> bool;
}
extern "C" {
    pub fn overright_spanset_float(ss: *const SpanSet, d: f64) -> bool;
}
extern "C" {
    pub fn overright_spanset_int(ss: *const SpanSet, i: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn overright_spanset_span(ss: *const SpanSet, s: *const Span) -> bool;
}
extern "C" {
    pub fn overright_spanset_spanset(ss1: *const SpanSet, ss2: *const SpanSet) -> bool;
}
extern "C" {
    pub fn overright_text_set(txt: *mut text, s: *const Set) -> bool;
}
extern "C" {
    pub fn right_bigint_set(i: int64, s: *const Set) -> bool;
}
extern "C" {
    pub fn right_bigint_span(i: int64, s: *const Span) -> bool;
}
extern "C" {
    pub fn right_bigint_spanset(i: int64, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn right_float_set(d: f64, s: *const Set) -> bool;
}
extern "C" {
    pub fn right_float_span(d: f64, s: *const Span) -> bool;
}
extern "C" {
    pub fn right_float_spanset(d: f64, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn right_int_set(i: ::std::os::raw::c_int, s: *const Set) -> bool;
}
extern "C" {
    pub fn right_int_span(i: ::std::os::raw::c_int, s: *const Span) -> bool;
}
extern "C" {
    pub fn right_int_spanset(i: ::std::os::raw::c_int, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn right_set_bigint(s: *const Set, i: int64) -> bool;
}
extern "C" {
    pub fn right_set_float(s: *const Set, d: f64) -> bool;
}
extern "C" {
    pub fn right_set_int(s: *const Set, i: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn right_set_set(s1: *const Set, s2: *const Set) -> bool;
}
extern "C" {
    pub fn right_set_text(s: *const Set, txt: *mut text) -> bool;
}
extern "C" {
    pub fn right_span_bigint(s: *const Span, i: int64) -> bool;
}
extern "C" {
    pub fn right_span_float(s: *const Span, d: f64) -> bool;
}
extern "C" {
    pub fn right_span_int(s: *const Span, i: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn right_span_span(s1: *const Span, s2: *const Span) -> bool;
}
extern "C" {
    pub fn right_span_spanset(s: *const Span, ss: *const SpanSet) -> bool;
}
extern "C" {
    pub fn right_spanset_bigint(ss: *const SpanSet, i: int64) -> bool;
}
extern "C" {
    pub fn right_spanset_float(ss: *const SpanSet, d: f64) -> bool;
}
extern "C" {
    pub fn right_spanset_int(ss: *const SpanSet, i: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn right_spanset_span(ss: *const SpanSet, s: *const Span) -> bool;
}
extern "C" {
    pub fn right_spanset_spanset(ss1: *const SpanSet, ss2: *const SpanSet) -> bool;
}
extern "C" {
    pub fn right_text_set(txt: *mut text, s: *const Set) -> bool;
}
extern "C" {
    pub fn intersection_bigint_set(i: int64, s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn intersection_date_set(d: DateADT, s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn intersection_float_set(d: f64, s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn intersection_geo_set(gs: *const GSERIALIZED, s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn intersection_int_set(i: ::std::os::raw::c_int, s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn intersection_set_bigint(s: *const Set, i: int64) -> *mut Set;
}
extern "C" {
    pub fn intersection_set_date(s: *const Set, d: DateADT) -> *mut Set;
}
extern "C" {
    pub fn intersection_set_float(s: *const Set, d: f64) -> *mut Set;
}
extern "C" {
    pub fn intersection_set_geo(s: *const Set, gs: *const GSERIALIZED) -> *mut Set;
}
extern "C" {
    pub fn intersection_set_int(s: *const Set, i: ::std::os::raw::c_int) -> *mut Set;
}
extern "C" {
    pub fn intersection_set_set(s1: *const Set, s2: *const Set) -> *mut Set;
}
extern "C" {
    pub fn intersection_set_text(s: *const Set, txt: *const text) -> *mut Set;
}
extern "C" {
    pub fn intersection_set_timestamptz(s: *const Set, t: TimestampTz) -> *mut Set;
}
extern "C" {
    pub fn intersection_span_bigint(s: *const Span, i: int64) -> *mut Span;
}
extern "C" {
    pub fn intersection_span_date(s: *const Span, d: DateADT) -> *mut Span;
}
extern "C" {
    pub fn intersection_span_float(s: *const Span, d: f64) -> *mut Span;
}
extern "C" {
    pub fn intersection_span_int(s: *const Span, i: ::std::os::raw::c_int) -> *mut Span;
}
extern "C" {
    pub fn intersection_span_span(s1: *const Span, s2: *const Span) -> *mut Span;
}
extern "C" {
    pub fn intersection_span_spanset(s: *const Span, ss: *const SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn intersection_span_timestamptz(s: *const Span, t: TimestampTz) -> *mut Span;
}
extern "C" {
    pub fn intersection_spanset_bigint(ss: *const SpanSet, i: int64) -> *mut SpanSet;
}
extern "C" {
    pub fn intersection_spanset_date(ss: *const SpanSet, d: DateADT) -> *mut SpanSet;
}
extern "C" {
    pub fn intersection_spanset_float(ss: *const SpanSet, d: f64) -> *mut SpanSet;
}
extern "C" {
    pub fn intersection_spanset_int(ss: *const SpanSet, i: ::std::os::raw::c_int) -> *mut SpanSet;
}
extern "C" {
    pub fn intersection_spanset_span(ss: *const SpanSet, s: *const Span) -> *mut SpanSet;
}
extern "C" {
    pub fn intersection_spanset_spanset(ss1: *const SpanSet, ss2: *const SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn intersection_spanset_timestamptz(ss: *const SpanSet, t: TimestampTz) -> *mut SpanSet;
}
extern "C" {
    pub fn intersection_text_set(txt: *const text, s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn intersection_timestamptz_set(t: TimestampTz, s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn minus_bigint_set(i: int64, s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn minus_bigint_span(i: int64, s: *const Span) -> *mut SpanSet;
}
extern "C" {
    pub fn minus_bigint_spanset(i: int64, ss: *const SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn minus_date_set(d: DateADT, s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn minus_date_span(d: DateADT, s: *const Span) -> *mut SpanSet;
}
extern "C" {
    pub fn minus_date_spanset(d: DateADT, ss: *const SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn minus_float_set(d: f64, s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn minus_float_span(d: f64, s: *const Span) -> *mut SpanSet;
}
extern "C" {
    pub fn minus_float_spanset(d: f64, ss: *const SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn minus_geo_set(gs: *const GSERIALIZED, s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn minus_int_set(i: ::std::os::raw::c_int, s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn minus_int_span(i: ::std::os::raw::c_int, s: *const Span) -> *mut SpanSet;
}
extern "C" {
    pub fn minus_int_spanset(i: ::std::os::raw::c_int, ss: *const SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn minus_set_bigint(s: *const Set, i: int64) -> *mut Set;
}
extern "C" {
    pub fn minus_set_date(s: *const Set, d: DateADT) -> *mut Set;
}
extern "C" {
    pub fn minus_set_float(s: *const Set, d: f64) -> *mut Set;
}
extern "C" {
    pub fn minus_set_geo(s: *const Set, gs: *const GSERIALIZED) -> *mut Set;
}
extern "C" {
    pub fn minus_set_int(s: *const Set, i: ::std::os::raw::c_int) -> *mut Set;
}
extern "C" {
    pub fn minus_set_set(s1: *const Set, s2: *const Set) -> *mut Set;
}
extern "C" {
    pub fn minus_set_text(s: *const Set, txt: *const text) -> *mut Set;
}
extern "C" {
    pub fn minus_set_timestamptz(s: *const Set, t: TimestampTz) -> *mut Set;
}
extern "C" {
    pub fn minus_span_bigint(s: *const Span, i: int64) -> *mut SpanSet;
}
extern "C" {
    pub fn minus_span_date(s: *const Span, d: DateADT) -> *mut SpanSet;
}
extern "C" {
    pub fn minus_span_float(s: *const Span, d: f64) -> *mut SpanSet;
}
extern "C" {
    pub fn minus_span_int(s: *const Span, i: ::std::os::raw::c_int) -> *mut SpanSet;
}
extern "C" {
    pub fn minus_span_span(s1: *const Span, s2: *const Span) -> *mut SpanSet;
}
extern "C" {
    pub fn minus_span_spanset(s: *const Span, ss: *const SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn minus_span_timestamptz(s: *const Span, t: TimestampTz) -> *mut SpanSet;
}
extern "C" {
    pub fn minus_spanset_bigint(ss: *const SpanSet, i: int64) -> *mut SpanSet;
}
extern "C" {
    pub fn minus_spanset_date(ss: *const SpanSet, d: DateADT) -> *mut SpanSet;
}
extern "C" {
    pub fn minus_spanset_float(ss: *const SpanSet, d: f64) -> *mut SpanSet;
}
extern "C" {
    pub fn minus_spanset_int(ss: *const SpanSet, i: ::std::os::raw::c_int) -> *mut SpanSet;
}
extern "C" {
    pub fn minus_spanset_span(ss: *const SpanSet, s: *const Span) -> *mut SpanSet;
}
extern "C" {
    pub fn minus_spanset_spanset(ss1: *const SpanSet, ss2: *const SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn minus_spanset_timestamptz(ss: *const SpanSet, t: TimestampTz) -> *mut SpanSet;
}
extern "C" {
    pub fn minus_text_set(txt: *const text, s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn minus_timestamptz_set(t: TimestampTz, s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn minus_timestamptz_span(t: TimestampTz, s: *const Span) -> *mut SpanSet;
}
extern "C" {
    pub fn minus_timestamptz_spanset(t: TimestampTz, ss: *const SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn union_bigint_set(i: int64, s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn union_bigint_span(s: *const Span, i: int64) -> *mut SpanSet;
}
extern "C" {
    pub fn union_bigint_spanset(i: int64, ss: *mut SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn union_date_set(d: DateADT, s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn union_date_span(s: *const Span, d: DateADT) -> *mut SpanSet;
}
extern "C" {
    pub fn union_date_spanset(d: DateADT, ss: *mut SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn union_float_set(d: f64, s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn union_float_span(s: *const Span, d: f64) -> *mut SpanSet;
}
extern "C" {
    pub fn union_float_spanset(d: f64, ss: *mut SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn union_geo_set(gs: *const GSERIALIZED, s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn union_int_set(i: ::std::os::raw::c_int, s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn union_int_span(i: ::std::os::raw::c_int, s: *const Span) -> *mut SpanSet;
}
extern "C" {
    pub fn union_int_spanset(i: ::std::os::raw::c_int, ss: *mut SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn union_set_bigint(s: *const Set, i: int64) -> *mut Set;
}
extern "C" {
    pub fn union_set_date(s: *const Set, d: DateADT) -> *mut Set;
}
extern "C" {
    pub fn union_set_float(s: *const Set, d: f64) -> *mut Set;
}
extern "C" {
    pub fn union_set_geo(s: *const Set, gs: *const GSERIALIZED) -> *mut Set;
}
extern "C" {
    pub fn union_set_int(s: *const Set, i: ::std::os::raw::c_int) -> *mut Set;
}
extern "C" {
    pub fn union_set_set(s1: *const Set, s2: *const Set) -> *mut Set;
}
extern "C" {
    pub fn union_set_text(s: *const Set, txt: *const text) -> *mut Set;
}
extern "C" {
    pub fn union_set_timestamptz(s: *const Set, t: TimestampTz) -> *mut Set;
}
extern "C" {
    pub fn union_span_bigint(s: *const Span, i: int64) -> *mut SpanSet;
}
extern "C" {
    pub fn union_span_date(s: *const Span, d: DateADT) -> *mut SpanSet;
}
extern "C" {
    pub fn union_span_float(s: *const Span, d: f64) -> *mut SpanSet;
}
extern "C" {
    pub fn union_span_int(s: *const Span, i: ::std::os::raw::c_int) -> *mut SpanSet;
}
extern "C" {
    pub fn union_span_span(s1: *const Span, s2: *const Span) -> *mut SpanSet;
}
extern "C" {
    pub fn union_span_spanset(s: *const Span, ss: *const SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn union_span_timestamptz(s: *const Span, t: TimestampTz) -> *mut SpanSet;
}
extern "C" {
    pub fn union_spanset_bigint(ss: *const SpanSet, i: int64) -> *mut SpanSet;
}
extern "C" {
    pub fn union_spanset_date(ss: *const SpanSet, d: DateADT) -> *mut SpanSet;
}
extern "C" {
    pub fn union_spanset_float(ss: *const SpanSet, d: f64) -> *mut SpanSet;
}
extern "C" {
    pub fn union_spanset_int(ss: *const SpanSet, i: ::std::os::raw::c_int) -> *mut SpanSet;
}
extern "C" {
    pub fn union_spanset_span(ss: *const SpanSet, s: *const Span) -> *mut SpanSet;
}
extern "C" {
    pub fn union_spanset_spanset(ss1: *const SpanSet, ss2: *const SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn union_spanset_timestamptz(ss: *const SpanSet, t: TimestampTz) -> *mut SpanSet;
}
extern "C" {
    pub fn union_text_set(txt: *const text, s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn union_timestamptz_set(t: TimestampTz, s: *const Set) -> *mut Set;
}
extern "C" {
    pub fn union_timestamptz_span(t: TimestampTz, s: *const Span) -> *mut SpanSet;
}
extern "C" {
    pub fn union_timestamptz_spanset(t: TimestampTz, ss: *mut SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn distance_bigintset_bigintset(s1: *const Set, s2: *const Set) -> int64;
}
extern "C" {
    pub fn distance_bigintspan_bigintspan(s1: *const Span, s2: *const Span) -> int64;
}
extern "C" {
    pub fn distance_bigintspanset_bigintspan(ss: *const SpanSet, s: *const Span) -> int64;
}
extern "C" {
    pub fn distance_bigintspanset_bigintspanset(ss1: *const SpanSet, ss2: *const SpanSet) -> int64;
}
extern "C" {
    pub fn distance_dateset_dateset(s1: *const Set, s2: *const Set) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn distance_datespan_datespan(s1: *const Span, s2: *const Span) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn distance_datespanset_datespan(
        ss: *const SpanSet,
        s: *const Span,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn distance_datespanset_datespanset(
        ss1: *const SpanSet,
        ss2: *const SpanSet,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn distance_floatset_floatset(s1: *const Set, s2: *const Set) -> f64;
}
extern "C" {
    pub fn distance_floatspan_floatspan(s1: *const Span, s2: *const Span) -> f64;
}
extern "C" {
    pub fn distance_floatspanset_floatspan(ss: *const SpanSet, s: *const Span) -> f64;
}
extern "C" {
    pub fn distance_floatspanset_floatspanset(ss1: *const SpanSet, ss2: *const SpanSet) -> f64;
}
extern "C" {
    pub fn distance_intset_intset(s1: *const Set, s2: *const Set) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn distance_intspan_intspan(s1: *const Span, s2: *const Span) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn distance_intspanset_intspan(ss: *const SpanSet, s: *const Span)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn distance_intspanset_intspanset(
        ss1: *const SpanSet,
        ss2: *const SpanSet,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn distance_set_bigint(s: *const Set, i: int64) -> int64;
}
extern "C" {
    pub fn distance_set_date(s: *const Set, d: DateADT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn distance_set_float(s: *const Set, d: f64) -> f64;
}
extern "C" {
    pub fn distance_set_int(s: *const Set, i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn distance_set_timestamptz(s: *const Set, t: TimestampTz) -> f64;
}
extern "C" {
    pub fn distance_span_bigint(s: *const Span, i: int64) -> int64;
}
extern "C" {
    pub fn distance_span_date(s: *const Span, d: DateADT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn distance_span_float(s: *const Span, d: f64) -> f64;
}
extern "C" {
    pub fn distance_span_int(s: *const Span, i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn distance_span_timestamptz(s: *const Span, t: TimestampTz) -> f64;
}
extern "C" {
    pub fn distance_spanset_bigint(ss: *const SpanSet, i: int64) -> int64;
}
extern "C" {
    pub fn distance_spanset_date(ss: *const SpanSet, d: DateADT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn distance_spanset_float(ss: *const SpanSet, d: f64) -> f64;
}
extern "C" {
    pub fn distance_spanset_int(
        ss: *const SpanSet,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn distance_spanset_timestamptz(ss: *const SpanSet, t: TimestampTz) -> f64;
}
extern "C" {
    pub fn distance_tstzset_tstzset(s1: *const Set, s2: *const Set) -> f64;
}
extern "C" {
    pub fn distance_tstzspan_tstzspan(s1: *const Span, s2: *const Span) -> f64;
}
extern "C" {
    pub fn distance_tstzspanset_tstzspan(ss: *const SpanSet, s: *const Span) -> f64;
}
extern "C" {
    pub fn distance_tstzspanset_tstzspanset(ss1: *const SpanSet, ss2: *const SpanSet) -> f64;
}
extern "C" {
    pub fn bigint_extent_transfn(state: *mut Span, i: int64) -> *mut Span;
}
extern "C" {
    pub fn bigint_union_transfn(state: *mut Set, i: int64) -> *mut Set;
}
extern "C" {
    pub fn date_extent_transfn(state: *mut Span, d: DateADT) -> *mut Span;
}
extern "C" {
    pub fn date_union_transfn(state: *mut Set, d: DateADT) -> *mut Set;
}
extern "C" {
    pub fn float_extent_transfn(state: *mut Span, d: f64) -> *mut Span;
}
extern "C" {
    pub fn float_union_transfn(state: *mut Set, d: f64) -> *mut Set;
}
extern "C" {
    pub fn int_extent_transfn(state: *mut Span, i: ::std::os::raw::c_int) -> *mut Span;
}
extern "C" {
    pub fn int_union_transfn(state: *mut Set, i: int32) -> *mut Set;
}
extern "C" {
    pub fn set_extent_transfn(state: *mut Span, s: *const Set) -> *mut Span;
}
extern "C" {
    pub fn set_union_finalfn(state: *mut Set) -> *mut Set;
}
extern "C" {
    pub fn set_union_transfn(state: *mut Set, s: *mut Set) -> *mut Set;
}
extern "C" {
    pub fn span_extent_transfn(state: *mut Span, s: *const Span) -> *mut Span;
}
extern "C" {
    pub fn span_union_transfn(state: *mut SpanSet, s: *const Span) -> *mut SpanSet;
}
extern "C" {
    pub fn spanset_extent_transfn(state: *mut Span, ss: *const SpanSet) -> *mut Span;
}
extern "C" {
    pub fn spanset_union_finalfn(state: *mut SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn spanset_union_transfn(state: *mut SpanSet, ss: *const SpanSet) -> *mut SpanSet;
}
extern "C" {
    pub fn text_union_transfn(state: *mut Set, txt: *const text) -> *mut Set;
}
extern "C" {
    pub fn timestamptz_extent_transfn(state: *mut Span, t: TimestampTz) -> *mut Span;
}
extern "C" {
    pub fn timestamptz_union_transfn(state: *mut Set, t: TimestampTz) -> *mut Set;
}
extern "C" {
    pub fn tbox_in(str_: *const ::std::os::raw::c_char) -> *mut TBox;
}
extern "C" {
    pub fn tbox_out(box_: *const TBox, maxdd: ::std::os::raw::c_int)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tbox_from_wkb(wkb: *const u8, size: usize) -> *mut TBox;
}
extern "C" {
    pub fn tbox_from_hexwkb(hexwkb: *const ::std::os::raw::c_char) -> *mut TBox;
}
extern "C" {
    pub fn stbox_from_wkb(wkb: *const u8, size: usize) -> *mut STBox;
}
extern "C" {
    pub fn stbox_from_hexwkb(hexwkb: *const ::std::os::raw::c_char) -> *mut STBox;
}
extern "C" {
    pub fn tbox_as_wkb(box_: *const TBox, variant: u8, size_out: *mut usize) -> *mut u8;
}
extern "C" {
    pub fn tbox_as_hexwkb(
        box_: *const TBox,
        variant: u8,
        size: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stbox_as_wkb(box_: *const STBox, variant: u8, size_out: *mut usize) -> *mut u8;
}
extern "C" {
    pub fn stbox_as_hexwkb(
        box_: *const STBox,
        variant: u8,
        size: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stbox_in(str_: *const ::std::os::raw::c_char) -> *mut STBox;
}
extern "C" {
    pub fn stbox_out(
        box_: *const STBox,
        maxdd: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn float_tstzspan_to_tbox(d: f64, s: *const Span) -> *mut TBox;
}
extern "C" {
    pub fn float_timestamptz_to_tbox(d: f64, t: TimestampTz) -> *mut TBox;
}
extern "C" {
    pub fn geo_tstzspan_to_stbox(gs: *const GSERIALIZED, s: *const Span) -> *mut STBox;
}
extern "C" {
    pub fn geo_timestamptz_to_stbox(gs: *const GSERIALIZED, t: TimestampTz) -> *mut STBox;
}
extern "C" {
    pub fn int_tstzspan_to_tbox(i: ::std::os::raw::c_int, s: *const Span) -> *mut TBox;
}
extern "C" {
    pub fn int_timestamptz_to_tbox(i: ::std::os::raw::c_int, t: TimestampTz) -> *mut TBox;
}
extern "C" {
    pub fn numspan_tstzspan_to_tbox(span: *const Span, s: *const Span) -> *mut TBox;
}
extern "C" {
    pub fn numspan_timestamptz_to_tbox(span: *const Span, t: TimestampTz) -> *mut TBox;
}
extern "C" {
    pub fn stbox_copy(box_: *const STBox) -> *mut STBox;
}
extern "C" {
    pub fn stbox_make(
        hasx: bool,
        hasz: bool,
        geodetic: bool,
        srid: int32,
        xmin: f64,
        xmax: f64,
        ymin: f64,
        ymax: f64,
        zmin: f64,
        zmax: f64,
        s: *const Span,
    ) -> *mut STBox;
}
extern "C" {
    pub fn tbox_copy(box_: *const TBox) -> *mut TBox;
}
extern "C" {
    pub fn tbox_make(s: *const Span, p: *const Span) -> *mut TBox;
}
extern "C" {
    pub fn float_to_tbox(d: f64) -> *mut TBox;
}
extern "C" {
    pub fn geo_to_stbox(gs: *const GSERIALIZED) -> *mut STBox;
}
extern "C" {
    pub fn int_to_tbox(i: ::std::os::raw::c_int) -> *mut TBox;
}
extern "C" {
    pub fn set_to_tbox(s: *const Set) -> *mut TBox;
}
extern "C" {
    pub fn span_to_tbox(s: *const Span) -> *mut TBox;
}
extern "C" {
    pub fn spanset_to_tbox(ss: *const SpanSet) -> *mut TBox;
}
extern "C" {
    pub fn spatialset_to_stbox(s: *const Set) -> *mut STBox;
}
extern "C" {
    pub fn stbox_to_gbox(box_: *const STBox) -> *mut GBOX;
}
extern "C" {
    pub fn stbox_to_box3d(box_: *const STBox) -> *mut BOX3D;
}
extern "C" {
    pub fn stbox_to_geo(box_: *const STBox) -> *mut GSERIALIZED;
}
extern "C" {
    pub fn stbox_to_tstzspan(box_: *const STBox) -> *mut Span;
}
extern "C" {
    pub fn tbox_to_intspan(box_: *const TBox) -> *mut Span;
}
extern "C" {
    pub fn tbox_to_floatspan(box_: *const TBox) -> *mut Span;
}
extern "C" {
    pub fn tbox_to_tstzspan(box_: *const TBox) -> *mut Span;
}
extern "C" {
    pub fn timestamptz_to_stbox(t: TimestampTz) -> *mut STBox;
}
extern "C" {
    pub fn timestamptz_to_tbox(t: TimestampTz) -> *mut TBox;
}
extern "C" {
    pub fn tstzset_to_stbox(s: *const Set) -> *mut STBox;
}
extern "C" {
    pub fn tstzspan_to_stbox(s: *const Span) -> *mut STBox;
}
extern "C" {
    pub fn tstzspanset_to_stbox(ss: *const SpanSet) -> *mut STBox;
}
extern "C" {
    pub fn tnumber_to_tbox(temp: *const Temporal) -> *mut TBox;
}
extern "C" {
    pub fn tpoint_to_stbox(temp: *const Temporal) -> *mut STBox;
}
extern "C" {
    pub fn stbox_area(box_: *const STBox, spheroid: bool) -> f64;
}
extern "C" {
    pub fn stbox_hast(box_: *const STBox) -> bool;
}
extern "C" {
    pub fn stbox_hasx(box_: *const STBox) -> bool;
}
extern "C" {
    pub fn stbox_hasz(box_: *const STBox) -> bool;
}
extern "C" {
    pub fn stbox_isgeodetic(box_: *const STBox) -> bool;
}
extern "C" {
    pub fn stbox_perimeter(box_: *const STBox, spheroid: bool) -> f64;
}
extern "C" {
    pub fn stbox_srid(box_: *const STBox) -> int32;
}
extern "C" {
    pub fn stbox_tmax(box_: *const STBox, result: *mut TimestampTz) -> bool;
}
extern "C" {
    pub fn stbox_tmax_inc(box_: *const STBox, result: *mut bool) -> bool;
}
extern "C" {
    pub fn stbox_tmin(box_: *const STBox, result: *mut TimestampTz) -> bool;
}
extern "C" {
    pub fn stbox_tmin_inc(box_: *const STBox, result: *mut bool) -> bool;
}
extern "C" {
    pub fn stbox_volume(box_: *const STBox) -> f64;
}
extern "C" {
    pub fn stbox_xmax(box_: *const STBox, result: *mut f64) -> bool;
}
extern "C" {
    pub fn stbox_xmin(box_: *const STBox, result: *mut f64) -> bool;
}
extern "C" {
    pub fn stbox_ymax(box_: *const STBox, result: *mut f64) -> bool;
}
extern "C" {
    pub fn stbox_ymin(box_: *const STBox, result: *mut f64) -> bool;
}
extern "C" {
    pub fn stbox_zmax(box_: *const STBox, result: *mut f64) -> bool;
}
extern "C" {
    pub fn stbox_zmin(box_: *const STBox, result: *mut f64) -> bool;
}
extern "C" {
    pub fn tbox_hast(box_: *const TBox) -> bool;
}
extern "C" {
    pub fn tbox_hasx(box_: *const TBox) -> bool;
}
extern "C" {
    pub fn tbox_tmax(box_: *const TBox, result: *mut TimestampTz) -> bool;
}
extern "C" {
    pub fn tbox_tmax_inc(box_: *const TBox, result: *mut bool) -> bool;
}
extern "C" {
    pub fn tbox_tmin(box_: *const TBox, result: *mut TimestampTz) -> bool;
}
extern "C" {
    pub fn tbox_tmin_inc(box_: *const TBox, result: *mut bool) -> bool;
}
extern "C" {
    pub fn tbox_xmax(box_: *const TBox, result: *mut f64) -> bool;
}
extern "C" {
    pub fn tbox_xmax_inc(box_: *const TBox, result: *mut bool) -> bool;
}
extern "C" {
    pub fn tbox_xmin(box_: *const TBox, result: *mut f64) -> bool;
}
extern "C" {
    pub fn tbox_xmin_inc(box_: *const TBox, result: *mut bool) -> bool;
}
extern "C" {
    pub fn tboxfloat_xmax(box_: *const TBox, result: *mut f64) -> bool;
}
extern "C" {
    pub fn tboxfloat_xmin(box_: *const TBox, result: *mut f64) -> bool;
}
extern "C" {
    pub fn tboxint_xmax(box_: *const TBox, result: *mut ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn tboxint_xmin(box_: *const TBox, result: *mut ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn stbox_expand_space(box_: *const STBox, d: f64) -> *mut STBox;
}
extern "C" {
    pub fn stbox_expand_time(box_: *const STBox, interv: *const Interval) -> *mut STBox;
}
extern "C" {
    pub fn stbox_get_space(box_: *const STBox) -> *mut STBox;
}
extern "C" {
    pub fn stbox_quad_split(box_: *const STBox, count: *mut ::std::os::raw::c_int) -> *mut STBox;
}
extern "C" {
    pub fn stbox_round(box_: *const STBox, maxdd: ::std::os::raw::c_int) -> *mut STBox;
}
extern "C" {
    pub fn stbox_set_srid(box_: *const STBox, srid: int32) -> *mut STBox;
}
extern "C" {
    pub fn stbox_shift_scale_time(
        box_: *const STBox,
        shift: *const Interval,
        duration: *const Interval,
    ) -> *mut STBox;
}
extern "C" {
    pub fn stbox_transform(box_: *const STBox, srid: int32) -> *mut STBox;
}
extern "C" {
    pub fn stbox_transform_pipeline(
        box_: *const STBox,
        pipelinestr: *const ::std::os::raw::c_char,
        srid: int32,
        is_forward: bool,
    ) -> *mut STBox;
}
extern "C" {
    pub fn stboxarr_round(
        boxarr: *const STBox,
        count: ::std::os::raw::c_int,
        maxdd: ::std::os::raw::c_int,
    ) -> *mut STBox;
}
extern "C" {
    pub fn tbox_expand_time(box_: *const TBox, interv: *const Interval) -> *mut TBox;
}
extern "C" {
    pub fn tbox_expand_float(box_: *const TBox, d: f64) -> *mut TBox;
}
extern "C" {
    pub fn tbox_expand_int(box_: *const TBox, i: ::std::os::raw::c_int) -> *mut TBox;
}
extern "C" {
    pub fn tbox_round(box_: *const TBox, maxdd: ::std::os::raw::c_int) -> *mut TBox;
}
extern "C" {
    pub fn tbox_shift_scale_float(
        box_: *const TBox,
        shift: f64,
        width: f64,
        hasshift: bool,
        haswidth: bool,
    ) -> *mut TBox;
}
extern "C" {
    pub fn tbox_shift_scale_int(
        box_: *const TBox,
        shift: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        hasshift: bool,
        haswidth: bool,
    ) -> *mut TBox;
}
extern "C" {
    pub fn tbox_shift_scale_time(
        box_: *const TBox,
        shift: *const Interval,
        duration: *const Interval,
    ) -> *mut TBox;
}
extern "C" {
    pub fn union_tbox_tbox(box1: *const TBox, box2: *const TBox, strict: bool) -> *mut TBox;
}
extern "C" {
    pub fn intersection_tbox_tbox(box1: *const TBox, box2: *const TBox) -> *mut TBox;
}
extern "C" {
    pub fn union_stbox_stbox(box1: *const STBox, box2: *const STBox, strict: bool) -> *mut STBox;
}
extern "C" {
    pub fn intersection_stbox_stbox(box1: *const STBox, box2: *const STBox) -> *mut STBox;
}
extern "C" {
    pub fn rtree_create_stbox() -> *mut RTree;
}
extern "C" {
    pub fn rtree_insert(rtree: *mut RTree, box_: *mut STBox, id: int64);
}
extern "C" {
    pub fn rtree_search(
        rtree: *const RTree,
        query: *const STBox,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn rtree_free(rtree: *mut RTree);
}
extern "C" {
    pub fn adjacent_stbox_stbox(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn adjacent_tbox_tbox(box1: *const TBox, box2: *const TBox) -> bool;
}
extern "C" {
    pub fn contained_tbox_tbox(box1: *const TBox, box2: *const TBox) -> bool;
}
extern "C" {
    pub fn contained_stbox_stbox(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn contains_stbox_stbox(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn contains_tbox_tbox(box1: *const TBox, box2: *const TBox) -> bool;
}
extern "C" {
    pub fn overlaps_tbox_tbox(box1: *const TBox, box2: *const TBox) -> bool;
}
extern "C" {
    pub fn overlaps_stbox_stbox(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn same_tbox_tbox(box1: *const TBox, box2: *const TBox) -> bool;
}
extern "C" {
    pub fn same_stbox_stbox(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn left_tbox_tbox(box1: *const TBox, box2: *const TBox) -> bool;
}
extern "C" {
    pub fn overleft_tbox_tbox(box1: *const TBox, box2: *const TBox) -> bool;
}
extern "C" {
    pub fn right_tbox_tbox(box1: *const TBox, box2: *const TBox) -> bool;
}
extern "C" {
    pub fn overright_tbox_tbox(box1: *const TBox, box2: *const TBox) -> bool;
}
extern "C" {
    pub fn before_tbox_tbox(box1: *const TBox, box2: *const TBox) -> bool;
}
extern "C" {
    pub fn overbefore_tbox_tbox(box1: *const TBox, box2: *const TBox) -> bool;
}
extern "C" {
    pub fn after_tbox_tbox(box1: *const TBox, box2: *const TBox) -> bool;
}
extern "C" {
    pub fn overafter_tbox_tbox(box1: *const TBox, box2: *const TBox) -> bool;
}
extern "C" {
    pub fn left_stbox_stbox(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn overleft_stbox_stbox(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn right_stbox_stbox(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn overright_stbox_stbox(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn below_stbox_stbox(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn overbelow_stbox_stbox(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn above_stbox_stbox(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn overabove_stbox_stbox(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn front_stbox_stbox(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn overfront_stbox_stbox(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn back_stbox_stbox(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn overback_stbox_stbox(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn before_stbox_stbox(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn overbefore_stbox_stbox(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn after_stbox_stbox(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn overafter_stbox_stbox(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn tbox_eq(box1: *const TBox, box2: *const TBox) -> bool;
}
extern "C" {
    pub fn tbox_ne(box1: *const TBox, box2: *const TBox) -> bool;
}
extern "C" {
    pub fn tbox_cmp(box1: *const TBox, box2: *const TBox) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tbox_lt(box1: *const TBox, box2: *const TBox) -> bool;
}
extern "C" {
    pub fn tbox_le(box1: *const TBox, box2: *const TBox) -> bool;
}
extern "C" {
    pub fn tbox_ge(box1: *const TBox, box2: *const TBox) -> bool;
}
extern "C" {
    pub fn tbox_gt(box1: *const TBox, box2: *const TBox) -> bool;
}
extern "C" {
    pub fn stbox_eq(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn stbox_ne(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn stbox_cmp(box1: *const STBox, box2: *const STBox) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stbox_lt(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn stbox_le(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn stbox_ge(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn stbox_gt(box1: *const STBox, box2: *const STBox) -> bool;
}
extern "C" {
    pub fn tbool_in(str_: *const ::std::os::raw::c_char) -> *mut Temporal;
}
extern "C" {
    pub fn tint_in(str_: *const ::std::os::raw::c_char) -> *mut Temporal;
}
extern "C" {
    pub fn tfloat_in(str_: *const ::std::os::raw::c_char) -> *mut Temporal;
}
extern "C" {
    pub fn ttext_in(str_: *const ::std::os::raw::c_char) -> *mut Temporal;
}
extern "C" {
    pub fn tgeompoint_in(str_: *const ::std::os::raw::c_char) -> *mut Temporal;
}
extern "C" {
    pub fn tgeogpoint_in(str_: *const ::std::os::raw::c_char) -> *mut Temporal;
}
extern "C" {
    pub fn tbool_from_mfjson(str_: *const ::std::os::raw::c_char) -> *mut Temporal;
}
extern "C" {
    pub fn tint_from_mfjson(str_: *const ::std::os::raw::c_char) -> *mut Temporal;
}
extern "C" {
    pub fn tfloat_from_mfjson(str_: *const ::std::os::raw::c_char) -> *mut Temporal;
}
extern "C" {
    pub fn ttext_from_mfjson(str_: *const ::std::os::raw::c_char) -> *mut Temporal;
}
extern "C" {
    pub fn tgeompoint_from_mfjson(str_: *const ::std::os::raw::c_char) -> *mut Temporal;
}
extern "C" {
    pub fn tgeogpoint_from_mfjson(str_: *const ::std::os::raw::c_char) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_from_wkb(wkb: *const u8, size: usize) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_from_hexwkb(hexwkb: *const ::std::os::raw::c_char) -> *mut Temporal;
}
extern "C" {
    pub fn tbool_out(temp: *const Temporal) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tint_out(temp: *const Temporal) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tfloat_out(
        temp: *const Temporal,
        maxdd: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttext_out(temp: *const Temporal) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tpoint_out(
        temp: *const Temporal,
        maxdd: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tpoint_as_text(
        temp: *const Temporal,
        maxdd: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tpoint_as_ewkt(
        temp: *const Temporal,
        maxdd: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn temporal_as_mfjson(
        temp: *const Temporal,
        with_bbox: bool,
        flags: ::std::os::raw::c_int,
        precision: ::std::os::raw::c_int,
        srs: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn temporal_as_wkb(temp: *const Temporal, variant: u8, size_out: *mut usize) -> *mut u8;
}
extern "C" {
    pub fn temporal_as_hexwkb(
        temp: *const Temporal,
        variant: u8,
        size_out: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tbool_from_base_temp(b: bool, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tboolinst_make(b: bool, t: TimestampTz) -> *mut TInstant;
}
extern "C" {
    pub fn tboolseq_from_base_tstzset(b: bool, s: *const Set) -> *mut TSequence;
}
extern "C" {
    pub fn tboolseq_from_base_tstzspan(b: bool, s: *const Span) -> *mut TSequence;
}
extern "C" {
    pub fn tboolseqset_from_base_tstzspanset(b: bool, ss: *const SpanSet) -> *mut TSequenceSet;
}
extern "C" {
    pub fn temporal_copy(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tfloat_from_base_temp(d: f64, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tfloatinst_make(d: f64, t: TimestampTz) -> *mut TInstant;
}
extern "C" {
    pub fn tfloatseq_from_base_tstzspan(
        d: f64,
        s: *const Span,
        interp: interpType,
    ) -> *mut TSequence;
}
extern "C" {
    pub fn tfloatseq_from_base_tstzset(d: f64, s: *const Set) -> *mut TSequence;
}
extern "C" {
    pub fn tfloatseqset_from_base_tstzspanset(
        d: f64,
        ss: *const SpanSet,
        interp: interpType,
    ) -> *mut TSequenceSet;
}
extern "C" {
    pub fn tint_from_base_temp(i: ::std::os::raw::c_int, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tintinst_make(i: ::std::os::raw::c_int, t: TimestampTz) -> *mut TInstant;
}
extern "C" {
    pub fn tintseq_from_base_tstzspan(i: ::std::os::raw::c_int, s: *const Span) -> *mut TSequence;
}
extern "C" {
    pub fn tintseq_from_base_tstzset(i: ::std::os::raw::c_int, s: *const Set) -> *mut TSequence;
}
extern "C" {
    pub fn tintseqset_from_base_tstzspanset(
        i: ::std::os::raw::c_int,
        ss: *const SpanSet,
    ) -> *mut TSequenceSet;
}
extern "C" {
    pub fn tpoint_from_base_temp(gs: *const GSERIALIZED, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tpointinst_make(gs: *const GSERIALIZED, t: TimestampTz) -> *mut TInstant;
}
extern "C" {
    pub fn tpointseq_from_base_tstzspan(
        gs: *const GSERIALIZED,
        s: *const Span,
        interp: interpType,
    ) -> *mut TSequence;
}
extern "C" {
    pub fn tpointseq_from_base_tstzset(gs: *const GSERIALIZED, s: *const Set) -> *mut TSequence;
}
extern "C" {
    pub fn tpointseqset_from_base_tstzspanset(
        gs: *const GSERIALIZED,
        ss: *const SpanSet,
        interp: interpType,
    ) -> *mut TSequenceSet;
}
extern "C" {
    pub fn tsequence_make(
        instants: *mut *const TInstant,
        count: ::std::os::raw::c_int,
        lower_inc: bool,
        upper_inc: bool,
        interp: interpType,
        normalize: bool,
    ) -> *mut TSequence;
}
extern "C" {
    pub fn tsequenceset_make(
        sequences: *mut *const TSequence,
        count: ::std::os::raw::c_int,
        normalize: bool,
    ) -> *mut TSequenceSet;
}
extern "C" {
    pub fn tsequenceset_make_gaps(
        instants: *mut *const TInstant,
        count: ::std::os::raw::c_int,
        interp: interpType,
        maxt: *const Interval,
        maxdist: f64,
    ) -> *mut TSequenceSet;
}
extern "C" {
    pub fn ttext_from_base_temp(txt: *const text, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn ttextinst_make(txt: *const text, t: TimestampTz) -> *mut TInstant;
}
extern "C" {
    pub fn ttextseq_from_base_tstzspan(txt: *const text, s: *const Span) -> *mut TSequence;
}
extern "C" {
    pub fn ttextseq_from_base_tstzset(txt: *const text, s: *const Set) -> *mut TSequence;
}
extern "C" {
    pub fn ttextseqset_from_base_tstzspanset(
        txt: *const text,
        ss: *const SpanSet,
    ) -> *mut TSequenceSet;
}
extern "C" {
    pub fn temporal_to_tstzspan(temp: *const Temporal) -> *mut Span;
}
extern "C" {
    pub fn tfloat_to_tint(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tint_to_tfloat(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tnumber_to_span(temp: *const Temporal) -> *mut Span;
}
extern "C" {
    pub fn tbool_end_value(temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn tbool_start_value(temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn tbool_value_at_timestamptz(
        temp: *const Temporal,
        t: TimestampTz,
        strict: bool,
        value: *mut bool,
    ) -> bool;
}
extern "C" {
    pub fn tbool_value_n(
        temp: *const Temporal,
        n: ::std::os::raw::c_int,
        result: *mut bool,
    ) -> bool;
}
extern "C" {
    pub fn tbool_values(temp: *const Temporal, count: *mut ::std::os::raw::c_int) -> *mut bool;
}
extern "C" {
    pub fn temporal_duration(temp: *const Temporal, boundspan: bool) -> *mut Interval;
}
extern "C" {
    pub fn temporal_end_instant(temp: *const Temporal) -> *mut TInstant;
}
extern "C" {
    pub fn temporal_end_sequence(temp: *const Temporal) -> *mut TSequence;
}
extern "C" {
    pub fn temporal_end_timestamptz(temp: *const Temporal) -> TimestampTz;
}
extern "C" {
    pub fn temporal_hash(temp: *const Temporal) -> uint32;
}
extern "C" {
    pub fn temporal_instant_n(temp: *const Temporal, n: ::std::os::raw::c_int) -> *mut TInstant;
}
extern "C" {
    pub fn temporal_instants(
        temp: *const Temporal,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut *mut TInstant;
}
extern "C" {
    pub fn temporal_interp(temp: *const Temporal) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn temporal_max_instant(temp: *const Temporal) -> *mut TInstant;
}
extern "C" {
    pub fn temporal_min_instant(temp: *const Temporal) -> *mut TInstant;
}
extern "C" {
    pub fn temporal_num_instants(temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn temporal_num_sequences(temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn temporal_num_timestamps(temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn temporal_segments(
        temp: *const Temporal,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut *mut TSequence;
}
extern "C" {
    pub fn temporal_sequence_n(temp: *const Temporal, i: ::std::os::raw::c_int) -> *mut TSequence;
}
extern "C" {
    pub fn temporal_sequences(
        temp: *const Temporal,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut *mut TSequence;
}
extern "C" {
    pub fn temporal_lower_inc(temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn temporal_upper_inc(temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn temporal_start_instant(temp: *const Temporal) -> *mut TInstant;
}
extern "C" {
    pub fn temporal_start_sequence(temp: *const Temporal) -> *mut TSequence;
}
extern "C" {
    pub fn temporal_start_timestamptz(temp: *const Temporal) -> TimestampTz;
}
extern "C" {
    pub fn temporal_stops(
        temp: *const Temporal,
        maxdist: f64,
        minduration: *const Interval,
    ) -> *mut TSequenceSet;
}
extern "C" {
    pub fn temporal_subtype(temp: *const Temporal) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn temporal_time(temp: *const Temporal) -> *mut SpanSet;
}
extern "C" {
    pub fn temporal_timestamptz_n(
        temp: *const Temporal,
        n: ::std::os::raw::c_int,
        result: *mut TimestampTz,
    ) -> bool;
}
extern "C" {
    pub fn temporal_timestamps(
        temp: *const Temporal,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut TimestampTz;
}
extern "C" {
    pub fn tfloat_end_value(temp: *const Temporal) -> f64;
}
extern "C" {
    pub fn tfloat_max_value(temp: *const Temporal) -> f64;
}
extern "C" {
    pub fn tfloat_min_value(temp: *const Temporal) -> f64;
}
extern "C" {
    pub fn tfloat_start_value(temp: *const Temporal) -> f64;
}
extern "C" {
    pub fn tfloat_value_at_timestamptz(
        temp: *const Temporal,
        t: TimestampTz,
        strict: bool,
        value: *mut f64,
    ) -> bool;
}
extern "C" {
    pub fn tfloat_value_n(
        temp: *const Temporal,
        n: ::std::os::raw::c_int,
        result: *mut f64,
    ) -> bool;
}
extern "C" {
    pub fn tfloat_values(temp: *const Temporal, count: *mut ::std::os::raw::c_int) -> *mut f64;
}
extern "C" {
    pub fn tint_end_value(temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tint_max_value(temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tint_min_value(temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tint_start_value(temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tint_value_at_timestamptz(
        temp: *const Temporal,
        t: TimestampTz,
        strict: bool,
        value: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn tint_value_n(
        temp: *const Temporal,
        n: ::std::os::raw::c_int,
        result: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn tint_values(
        temp: *const Temporal,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn tnumber_integral(temp: *const Temporal) -> f64;
}
extern "C" {
    pub fn tnumber_twavg(temp: *const Temporal) -> f64;
}
extern "C" {
    pub fn tnumber_valuespans(temp: *const Temporal) -> *mut SpanSet;
}
extern "C" {
    pub fn tpoint_end_value(temp: *const Temporal) -> *mut GSERIALIZED;
}
extern "C" {
    pub fn tpoint_start_value(temp: *const Temporal) -> *mut GSERIALIZED;
}
extern "C" {
    pub fn tpoint_value_at_timestamptz(
        temp: *const Temporal,
        t: TimestampTz,
        strict: bool,
        value: *mut *mut GSERIALIZED,
    ) -> bool;
}
extern "C" {
    pub fn tpoint_value_n(
        temp: *const Temporal,
        n: ::std::os::raw::c_int,
        result: *mut *mut GSERIALIZED,
    ) -> bool;
}
extern "C" {
    pub fn tpoint_values(
        temp: *const Temporal,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut *mut GSERIALIZED;
}
extern "C" {
    pub fn ttext_end_value(temp: *const Temporal) -> *mut text;
}
extern "C" {
    pub fn ttext_max_value(temp: *const Temporal) -> *mut text;
}
extern "C" {
    pub fn ttext_min_value(temp: *const Temporal) -> *mut text;
}
extern "C" {
    pub fn ttext_start_value(temp: *const Temporal) -> *mut text;
}
extern "C" {
    pub fn ttext_value_at_timestamptz(
        temp: *const Temporal,
        t: TimestampTz,
        strict: bool,
        value: *mut *mut text,
    ) -> bool;
}
extern "C" {
    pub fn ttext_value_n(
        temp: *const Temporal,
        n: ::std::os::raw::c_int,
        result: *mut *mut text,
    ) -> bool;
}
extern "C" {
    pub fn ttext_values(temp: *const Temporal, count: *mut ::std::os::raw::c_int)
        -> *mut *mut text;
}
extern "C" {
    pub fn float_degrees(value: f64, normalize: bool) -> f64;
}
extern "C" {
    pub fn temporal_scale_time(temp: *const Temporal, duration: *const Interval) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_set_interp(temp: *const Temporal, interp: interpType) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_shift_scale_time(
        temp: *const Temporal,
        shift: *const Interval,
        duration: *const Interval,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_shift_time(temp: *const Temporal, shift: *const Interval) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_to_tinstant(temp: *const Temporal) -> *mut TInstant;
}
extern "C" {
    pub fn temporal_to_tsequence(
        temp: *const Temporal,
        interp_str: *const ::std::os::raw::c_char,
    ) -> *mut TSequence;
}
extern "C" {
    pub fn temporal_to_tsequenceset(
        temp: *const Temporal,
        interp_str: *const ::std::os::raw::c_char,
    ) -> *mut TSequenceSet;
}
extern "C" {
    pub fn tfloat_floor(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tfloat_ceil(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tfloat_degrees(temp: *const Temporal, normalize: bool) -> *mut Temporal;
}
extern "C" {
    pub fn tfloat_radians(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tfloat_round(temp: *const Temporal, maxdd: ::std::os::raw::c_int) -> *mut Temporal;
}
extern "C" {
    pub fn tfloat_scale_value(temp: *const Temporal, width: f64) -> *mut Temporal;
}
extern "C" {
    pub fn tfloat_shift_scale_value(temp: *const Temporal, shift: f64, width: f64)
        -> *mut Temporal;
}
extern "C" {
    pub fn tfloat_shift_value(temp: *const Temporal, shift: f64) -> *mut Temporal;
}
extern "C" {
    pub fn tfloatarr_round(
        temp: *mut *const Temporal,
        count: ::std::os::raw::c_int,
        maxdd: ::std::os::raw::c_int,
    ) -> *mut *mut Temporal;
}
extern "C" {
    pub fn tint_scale_value(temp: *const Temporal, width: ::std::os::raw::c_int) -> *mut Temporal;
}
extern "C" {
    pub fn tint_shift_scale_value(
        temp: *const Temporal,
        shift: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn tint_shift_value(temp: *const Temporal, shift: ::std::os::raw::c_int) -> *mut Temporal;
}
extern "C" {
    pub fn tpoint_round(temp: *const Temporal, maxdd: ::std::os::raw::c_int) -> *mut Temporal;
}
extern "C" {
    pub fn tpoint_transform(temp: *const Temporal, srid: int32) -> *mut Temporal;
}
extern "C" {
    pub fn tpoint_transform_pipeline(
        temp: *const Temporal,
        pipelinestr: *const ::std::os::raw::c_char,
        srid: int32,
        is_forward: bool,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn tpoint_transform_pj(
        temp: *const Temporal,
        srid: int32,
        pj: *const LWPROJ,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn lwproj_transform(srid_from: int32, srid_to: int32) -> *mut LWPROJ;
}
extern "C" {
    pub fn tpointarr_round(
        temp: *mut *const Temporal,
        count: ::std::os::raw::c_int,
        maxdd: ::std::os::raw::c_int,
    ) -> *mut *mut Temporal;
}
extern "C" {
    pub fn temporal_append_tinstant(
        temp: *mut Temporal,
        inst: *const TInstant,
        maxdist: f64,
        maxt: *const Interval,
        expand: bool,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_append_tsequence(
        temp: *mut Temporal,
        seq: *const TSequence,
        expand: bool,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_delete_tstzspan(
        temp: *const Temporal,
        s: *const Span,
        connect: bool,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_delete_tstzspanset(
        temp: *const Temporal,
        ss: *const SpanSet,
        connect: bool,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_delete_timestamptz(
        temp: *const Temporal,
        t: TimestampTz,
        connect: bool,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_delete_tstzset(
        temp: *const Temporal,
        s: *const Set,
        connect: bool,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_insert(
        temp1: *const Temporal,
        temp2: *const Temporal,
        connect: bool,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_merge(temp1: *const Temporal, temp2: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_merge_array(
        temparr: *mut *const Temporal,
        count: ::std::os::raw::c_int,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_update(
        temp1: *const Temporal,
        temp2: *const Temporal,
        connect: bool,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn tbool_at_value(temp: *const Temporal, b: bool) -> *mut Temporal;
}
extern "C" {
    pub fn tbool_minus_value(temp: *const Temporal, b: bool) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_at_max(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_at_min(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_at_tstzspan(temp: *const Temporal, s: *const Span) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_at_tstzspanset(temp: *const Temporal, ss: *const SpanSet) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_at_timestamptz(temp: *const Temporal, t: TimestampTz) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_at_tstzset(temp: *const Temporal, s: *const Set) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_at_values(temp: *const Temporal, set: *const Set) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_minus_max(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_minus_min(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_minus_tstzspan(temp: *const Temporal, s: *const Span) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_minus_tstzspanset(temp: *const Temporal, ss: *const SpanSet) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_minus_timestamptz(temp: *const Temporal, t: TimestampTz) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_minus_tstzset(temp: *const Temporal, s: *const Set) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_minus_values(temp: *const Temporal, set: *const Set) -> *mut Temporal;
}
extern "C" {
    pub fn tfloat_at_value(temp: *const Temporal, d: f64) -> *mut Temporal;
}
extern "C" {
    pub fn tfloat_minus_value(temp: *const Temporal, d: f64) -> *mut Temporal;
}
extern "C" {
    pub fn tint_at_value(temp: *const Temporal, i: ::std::os::raw::c_int) -> *mut Temporal;
}
extern "C" {
    pub fn tint_minus_value(temp: *const Temporal, i: ::std::os::raw::c_int) -> *mut Temporal;
}
extern "C" {
    pub fn tnumber_at_span(temp: *const Temporal, span: *const Span) -> *mut Temporal;
}
extern "C" {
    pub fn tnumber_at_spanset(temp: *const Temporal, ss: *const SpanSet) -> *mut Temporal;
}
extern "C" {
    pub fn tnumber_at_tbox(temp: *const Temporal, box_: *const TBox) -> *mut Temporal;
}
extern "C" {
    pub fn tnumber_minus_span(temp: *const Temporal, span: *const Span) -> *mut Temporal;
}
extern "C" {
    pub fn tnumber_minus_spanset(temp: *const Temporal, ss: *const SpanSet) -> *mut Temporal;
}
extern "C" {
    pub fn tnumber_minus_tbox(temp: *const Temporal, box_: *const TBox) -> *mut Temporal;
}
extern "C" {
    pub fn tpoint_at_geom_time(
        temp: *const Temporal,
        gs: *const GSERIALIZED,
        zspan: *const Span,
        period: *const Span,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn tpoint_at_stbox(
        temp: *const Temporal,
        box_: *const STBox,
        border_inc: bool,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn tpoint_at_value(temp: *const Temporal, gs: *mut GSERIALIZED) -> *mut Temporal;
}
extern "C" {
    pub fn tpoint_minus_geom_time(
        temp: *const Temporal,
        gs: *const GSERIALIZED,
        zspan: *const Span,
        period: *const Span,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn tpoint_minus_stbox(
        temp: *const Temporal,
        box_: *const STBox,
        border_inc: bool,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn tpoint_minus_value(temp: *const Temporal, gs: *mut GSERIALIZED) -> *mut Temporal;
}
extern "C" {
    pub fn ttext_at_value(temp: *const Temporal, txt: *mut text) -> *mut Temporal;
}
extern "C" {
    pub fn ttext_minus_value(temp: *const Temporal, txt: *mut text) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_cmp(temp1: *const Temporal, temp2: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn temporal_eq(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn temporal_ge(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn temporal_gt(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn temporal_le(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn temporal_lt(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn temporal_ne(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn always_eq_bool_tbool(b: bool, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_eq_float_tfloat(d: f64, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_eq_int_tint(
        i: ::std::os::raw::c_int,
        temp: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_eq_point_tpoint(
        gs: *const GSERIALIZED,
        temp: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_eq_tbool_bool(temp: *const Temporal, b: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_eq_temporal_temporal(
        temp1: *const Temporal,
        temp2: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_eq_text_ttext(txt: *const text, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_eq_tfloat_float(temp: *const Temporal, d: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_eq_tint_int(
        temp: *const Temporal,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_eq_tpoint_point(
        temp: *const Temporal,
        gs: *const GSERIALIZED,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_eq_tpoint_tpoint(
        temp1: *const Temporal,
        temp2: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_eq_ttext_text(temp: *const Temporal, txt: *const text) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_ne_bool_tbool(b: bool, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_ne_float_tfloat(d: f64, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_ne_int_tint(
        i: ::std::os::raw::c_int,
        temp: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_ne_point_tpoint(
        gs: *const GSERIALIZED,
        temp: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_ne_tbool_bool(temp: *const Temporal, b: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_ne_temporal_temporal(
        temp1: *const Temporal,
        temp2: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_ne_text_ttext(txt: *const text, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_ne_tfloat_float(temp: *const Temporal, d: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_ne_tint_int(
        temp: *const Temporal,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_ne_tpoint_point(
        temp: *const Temporal,
        gs: *const GSERIALIZED,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_ne_tpoint_tpoint(
        temp1: *const Temporal,
        temp2: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_ne_ttext_text(temp: *const Temporal, txt: *const text) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_ge_float_tfloat(d: f64, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_ge_int_tint(
        i: ::std::os::raw::c_int,
        temp: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_ge_temporal_temporal(
        temp1: *const Temporal,
        temp2: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_ge_text_ttext(txt: *const text, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_ge_tfloat_float(temp: *const Temporal, d: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_ge_tint_int(
        temp: *const Temporal,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_ge_ttext_text(temp: *const Temporal, txt: *const text) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_gt_float_tfloat(d: f64, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_gt_int_tint(
        i: ::std::os::raw::c_int,
        temp: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_gt_temporal_temporal(
        temp1: *const Temporal,
        temp2: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_gt_text_ttext(txt: *const text, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_gt_tfloat_float(temp: *const Temporal, d: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_gt_tint_int(
        temp: *const Temporal,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_gt_ttext_text(temp: *const Temporal, txt: *const text) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_le_float_tfloat(d: f64, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_le_int_tint(
        i: ::std::os::raw::c_int,
        temp: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_le_temporal_temporal(
        temp1: *const Temporal,
        temp2: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_le_text_ttext(txt: *const text, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_le_tfloat_float(temp: *const Temporal, d: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_le_tint_int(
        temp: *const Temporal,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_le_ttext_text(temp: *const Temporal, txt: *const text) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_lt_float_tfloat(d: f64, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_lt_int_tint(
        i: ::std::os::raw::c_int,
        temp: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_lt_temporal_temporal(
        temp1: *const Temporal,
        temp2: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_lt_text_ttext(txt: *const text, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_lt_tfloat_float(temp: *const Temporal, d: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_lt_tint_int(
        temp: *const Temporal,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn always_lt_ttext_text(temp: *const Temporal, txt: *const text) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_eq_bool_tbool(b: bool, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_eq_float_tfloat(d: f64, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_eq_int_tint(
        i: ::std::os::raw::c_int,
        temp: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_eq_point_tpoint(
        gs: *const GSERIALIZED,
        temp: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_eq_tbool_bool(temp: *const Temporal, b: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_eq_temporal_temporal(
        temp1: *const Temporal,
        temp2: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_eq_text_ttext(txt: *const text, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_eq_tfloat_float(temp: *const Temporal, d: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_eq_tint_int(
        temp: *const Temporal,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_eq_tpoint_point(
        temp: *const Temporal,
        gs: *const GSERIALIZED,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_eq_tpoint_tpoint(
        temp1: *const Temporal,
        temp2: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_eq_ttext_text(temp: *const Temporal, txt: *const text) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_ge_float_tfloat(d: f64, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_ge_int_tint(
        i: ::std::os::raw::c_int,
        temp: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_ge_temporal_temporal(
        temp1: *const Temporal,
        temp2: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_ge_text_ttext(txt: *const text, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_ge_tfloat_float(temp: *const Temporal, d: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_ge_tint_int(
        temp: *const Temporal,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_ge_ttext_text(temp: *const Temporal, txt: *const text) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_gt_float_tfloat(d: f64, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_gt_int_tint(
        i: ::std::os::raw::c_int,
        temp: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_gt_temporal_temporal(
        temp1: *const Temporal,
        temp2: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_gt_text_ttext(txt: *const text, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_gt_tfloat_float(temp: *const Temporal, d: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_gt_tint_int(
        temp: *const Temporal,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_gt_ttext_text(temp: *const Temporal, txt: *const text) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_le_float_tfloat(d: f64, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_le_int_tint(
        i: ::std::os::raw::c_int,
        temp: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_le_temporal_temporal(
        temp1: *const Temporal,
        temp2: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_le_text_ttext(txt: *const text, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_le_tfloat_float(temp: *const Temporal, d: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_le_tint_int(
        temp: *const Temporal,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_le_ttext_text(temp: *const Temporal, txt: *const text) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_lt_float_tfloat(d: f64, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_lt_int_tint(
        i: ::std::os::raw::c_int,
        temp: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_lt_temporal_temporal(
        temp1: *const Temporal,
        temp2: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_lt_text_ttext(txt: *const text, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_lt_tfloat_float(temp: *const Temporal, d: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_lt_tint_int(
        temp: *const Temporal,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_lt_ttext_text(temp: *const Temporal, txt: *const text) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_ne_bool_tbool(b: bool, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_ne_float_tfloat(d: f64, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_ne_int_tint(
        i: ::std::os::raw::c_int,
        temp: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_ne_point_tpoint(
        gs: *const GSERIALIZED,
        temp: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_ne_tbool_bool(temp: *const Temporal, b: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_ne_temporal_temporal(
        temp1: *const Temporal,
        temp2: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_ne_text_ttext(txt: *const text, temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_ne_tfloat_float(temp: *const Temporal, d: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_ne_tint_int(
        temp: *const Temporal,
        i: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_ne_tpoint_point(
        temp: *const Temporal,
        gs: *const GSERIALIZED,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_ne_tpoint_tpoint(
        temp1: *const Temporal,
        temp2: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ever_ne_ttext_text(temp: *const Temporal, txt: *const text) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn teq_bool_tbool(b: bool, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn teq_float_tfloat(d: f64, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn teq_int_tint(i: ::std::os::raw::c_int, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn teq_point_tpoint(gs: *const GSERIALIZED, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn teq_tbool_bool(temp: *const Temporal, b: bool) -> *mut Temporal;
}
extern "C" {
    pub fn teq_temporal_temporal(temp1: *const Temporal, temp2: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn teq_text_ttext(txt: *const text, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn teq_tfloat_float(temp: *const Temporal, d: f64) -> *mut Temporal;
}
extern "C" {
    pub fn teq_tpoint_point(temp: *const Temporal, gs: *const GSERIALIZED) -> *mut Temporal;
}
extern "C" {
    pub fn teq_tint_int(temp: *const Temporal, i: ::std::os::raw::c_int) -> *mut Temporal;
}
extern "C" {
    pub fn teq_ttext_text(temp: *const Temporal, txt: *const text) -> *mut Temporal;
}
extern "C" {
    pub fn tge_float_tfloat(d: f64, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tge_int_tint(i: ::std::os::raw::c_int, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tge_temporal_temporal(temp1: *const Temporal, temp2: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tge_text_ttext(txt: *const text, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tge_tfloat_float(temp: *const Temporal, d: f64) -> *mut Temporal;
}
extern "C" {
    pub fn tge_tint_int(temp: *const Temporal, i: ::std::os::raw::c_int) -> *mut Temporal;
}
extern "C" {
    pub fn tge_ttext_text(temp: *const Temporal, txt: *const text) -> *mut Temporal;
}
extern "C" {
    pub fn tgt_float_tfloat(d: f64, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tgt_int_tint(i: ::std::os::raw::c_int, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tgt_temporal_temporal(temp1: *const Temporal, temp2: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tgt_text_ttext(txt: *const text, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tgt_tfloat_float(temp: *const Temporal, d: f64) -> *mut Temporal;
}
extern "C" {
    pub fn tgt_tint_int(temp: *const Temporal, i: ::std::os::raw::c_int) -> *mut Temporal;
}
extern "C" {
    pub fn tgt_ttext_text(temp: *const Temporal, txt: *const text) -> *mut Temporal;
}
extern "C" {
    pub fn tle_float_tfloat(d: f64, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tle_int_tint(i: ::std::os::raw::c_int, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tle_temporal_temporal(temp1: *const Temporal, temp2: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tle_text_ttext(txt: *const text, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tle_tfloat_float(temp: *const Temporal, d: f64) -> *mut Temporal;
}
extern "C" {
    pub fn tle_tint_int(temp: *const Temporal, i: ::std::os::raw::c_int) -> *mut Temporal;
}
extern "C" {
    pub fn tle_ttext_text(temp: *const Temporal, txt: *const text) -> *mut Temporal;
}
extern "C" {
    pub fn tlt_float_tfloat(d: f64, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tlt_int_tint(i: ::std::os::raw::c_int, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tlt_temporal_temporal(temp1: *const Temporal, temp2: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tlt_text_ttext(txt: *const text, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tlt_tfloat_float(temp: *const Temporal, d: f64) -> *mut Temporal;
}
extern "C" {
    pub fn tlt_tint_int(temp: *const Temporal, i: ::std::os::raw::c_int) -> *mut Temporal;
}
extern "C" {
    pub fn tlt_ttext_text(temp: *const Temporal, txt: *const text) -> *mut Temporal;
}
extern "C" {
    pub fn tne_bool_tbool(b: bool, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tne_float_tfloat(d: f64, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tne_int_tint(i: ::std::os::raw::c_int, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tne_point_tpoint(gs: *const GSERIALIZED, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tne_tbool_bool(temp: *const Temporal, b: bool) -> *mut Temporal;
}
extern "C" {
    pub fn tne_temporal_temporal(temp1: *const Temporal, temp2: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tne_text_ttext(txt: *const text, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tne_tfloat_float(temp: *const Temporal, d: f64) -> *mut Temporal;
}
extern "C" {
    pub fn tne_tpoint_point(temp: *const Temporal, gs: *const GSERIALIZED) -> *mut Temporal;
}
extern "C" {
    pub fn tne_tint_int(temp: *const Temporal, i: ::std::os::raw::c_int) -> *mut Temporal;
}
extern "C" {
    pub fn tne_ttext_text(temp: *const Temporal, txt: *const text) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_spans(temp: *const Temporal, count: *mut ::std::os::raw::c_int) -> *mut Span;
}
extern "C" {
    pub fn temporal_split_each_n_spans(
        temp: *const Temporal,
        elem_count: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn temporal_split_n_spans(
        temp: *const Temporal,
        span_count: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn tnumber_tboxes(temp: *const Temporal, count: *mut ::std::os::raw::c_int) -> *mut TBox;
}
extern "C" {
    pub fn tnumber_split_each_n_tboxes(
        temp: *const Temporal,
        elem_count: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut TBox;
}
extern "C" {
    pub fn tnumber_split_n_tboxes(
        temp: *const Temporal,
        box_count: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut TBox;
}
extern "C" {
    pub fn tpoint_stboxes(temp: *const Temporal, count: *mut ::std::os::raw::c_int) -> *mut STBox;
}
extern "C" {
    pub fn tpoint_space_boxes(
        temp: *const Temporal,
        xsize: f64,
        ysize: f64,
        zsize: f64,
        sorigin: *const GSERIALIZED,
        bitmatrix: bool,
        border_inc: bool,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut STBox;
}
extern "C" {
    pub fn tpoint_space_time_boxes(
        temp: *const Temporal,
        xsize: f64,
        ysize: f64,
        zsize: f64,
        duration: *const Interval,
        sorigin: *const GSERIALIZED,
        torigin: TimestampTz,
        bitmatrix: bool,
        border_inc: bool,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut STBox;
}
extern "C" {
    pub fn tpoint_split_each_n_stboxes(
        temp: *const Temporal,
        elem_count: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut STBox;
}
extern "C" {
    pub fn tpoint_split_n_stboxes(
        temp: *const Temporal,
        box_count: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut STBox;
}
extern "C" {
    pub fn geo_split_each_n_gboxes(
        gs: *const GSERIALIZED,
        elem_count: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut GBOX;
}
extern "C" {
    pub fn geo_split_n_gboxes(
        gs: *const GSERIALIZED,
        box_count: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut GBOX;
}
extern "C" {
    pub fn adjacent_numspan_tnumber(s: *const Span, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn adjacent_stbox_tpoint(box_: *const STBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn adjacent_tbox_tnumber(box_: *const TBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn adjacent_temporal_temporal(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn adjacent_temporal_tstzspan(temp: *const Temporal, s: *const Span) -> bool;
}
extern "C" {
    pub fn adjacent_tnumber_numspan(temp: *const Temporal, s: *const Span) -> bool;
}
extern "C" {
    pub fn adjacent_tnumber_tbox(temp: *const Temporal, box_: *const TBox) -> bool;
}
extern "C" {
    pub fn adjacent_tnumber_tnumber(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn adjacent_tpoint_stbox(temp: *const Temporal, box_: *const STBox) -> bool;
}
extern "C" {
    pub fn adjacent_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn adjacent_tstzspan_temporal(s: *const Span, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn contained_numspan_tnumber(s: *const Span, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn contained_stbox_tpoint(box_: *const STBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn contained_tbox_tnumber(box_: *const TBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn contained_temporal_temporal(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn contained_temporal_tstzspan(temp: *const Temporal, s: *const Span) -> bool;
}
extern "C" {
    pub fn contained_tnumber_numspan(temp: *const Temporal, s: *const Span) -> bool;
}
extern "C" {
    pub fn contained_tnumber_tbox(temp: *const Temporal, box_: *const TBox) -> bool;
}
extern "C" {
    pub fn contained_tnumber_tnumber(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn contained_tpoint_stbox(temp: *const Temporal, box_: *const STBox) -> bool;
}
extern "C" {
    pub fn contained_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn contained_tstzspan_temporal(s: *const Span, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn contains_numspan_tnumber(s: *const Span, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn contains_stbox_tpoint(box_: *const STBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn contains_tbox_tnumber(box_: *const TBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn contains_temporal_tstzspan(temp: *const Temporal, s: *const Span) -> bool;
}
extern "C" {
    pub fn contains_temporal_temporal(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn contains_tnumber_numspan(temp: *const Temporal, s: *const Span) -> bool;
}
extern "C" {
    pub fn contains_tnumber_tbox(temp: *const Temporal, box_: *const TBox) -> bool;
}
extern "C" {
    pub fn contains_tnumber_tnumber(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn contains_tpoint_stbox(temp: *const Temporal, box_: *const STBox) -> bool;
}
extern "C" {
    pub fn contains_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn contains_tstzspan_temporal(s: *const Span, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn overlaps_numspan_tnumber(s: *const Span, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn overlaps_stbox_tpoint(box_: *const STBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn overlaps_tbox_tnumber(box_: *const TBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn overlaps_temporal_temporal(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn overlaps_temporal_tstzspan(temp: *const Temporal, s: *const Span) -> bool;
}
extern "C" {
    pub fn overlaps_tnumber_numspan(temp: *const Temporal, s: *const Span) -> bool;
}
extern "C" {
    pub fn overlaps_tnumber_tbox(temp: *const Temporal, box_: *const TBox) -> bool;
}
extern "C" {
    pub fn overlaps_tnumber_tnumber(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn overlaps_tpoint_stbox(temp: *const Temporal, box_: *const STBox) -> bool;
}
extern "C" {
    pub fn overlaps_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn overlaps_tstzspan_temporal(s: *const Span, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn same_numspan_tnumber(s: *const Span, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn same_stbox_tpoint(box_: *const STBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn same_tbox_tnumber(box_: *const TBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn same_temporal_temporal(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn same_temporal_tstzspan(temp: *const Temporal, s: *const Span) -> bool;
}
extern "C" {
    pub fn same_tnumber_numspan(temp: *const Temporal, s: *const Span) -> bool;
}
extern "C" {
    pub fn same_tnumber_tbox(temp: *const Temporal, box_: *const TBox) -> bool;
}
extern "C" {
    pub fn same_tnumber_tnumber(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn same_tpoint_stbox(temp: *const Temporal, box_: *const STBox) -> bool;
}
extern "C" {
    pub fn same_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn same_tstzspan_temporal(s: *const Span, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn above_stbox_tpoint(box_: *const STBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn above_tpoint_stbox(temp: *const Temporal, box_: *const STBox) -> bool;
}
extern "C" {
    pub fn above_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn after_stbox_tpoint(box_: *const STBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn after_tbox_tnumber(box_: *const TBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn after_temporal_tstzspan(temp: *const Temporal, s: *const Span) -> bool;
}
extern "C" {
    pub fn after_temporal_temporal(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn after_tnumber_tbox(temp: *const Temporal, box_: *const TBox) -> bool;
}
extern "C" {
    pub fn after_tnumber_tnumber(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn after_tpoint_stbox(temp: *const Temporal, box_: *const STBox) -> bool;
}
extern "C" {
    pub fn after_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn after_tstzspan_temporal(s: *const Span, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn back_stbox_tpoint(box_: *const STBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn back_tpoint_stbox(temp: *const Temporal, box_: *const STBox) -> bool;
}
extern "C" {
    pub fn back_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn before_stbox_tpoint(box_: *const STBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn before_tbox_tnumber(box_: *const TBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn before_temporal_tstzspan(temp: *const Temporal, s: *const Span) -> bool;
}
extern "C" {
    pub fn before_temporal_temporal(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn before_tnumber_tbox(temp: *const Temporal, box_: *const TBox) -> bool;
}
extern "C" {
    pub fn before_tnumber_tnumber(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn before_tpoint_stbox(temp: *const Temporal, box_: *const STBox) -> bool;
}
extern "C" {
    pub fn before_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn before_tstzspan_temporal(s: *const Span, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn below_stbox_tpoint(box_: *const STBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn below_tpoint_stbox(temp: *const Temporal, box_: *const STBox) -> bool;
}
extern "C" {
    pub fn below_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn front_stbox_tpoint(box_: *const STBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn front_tpoint_stbox(temp: *const Temporal, box_: *const STBox) -> bool;
}
extern "C" {
    pub fn front_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn left_stbox_tpoint(box_: *const STBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn left_tbox_tnumber(box_: *const TBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn left_numspan_tnumber(s: *const Span, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn left_tnumber_numspan(temp: *const Temporal, s: *const Span) -> bool;
}
extern "C" {
    pub fn left_tnumber_tbox(temp: *const Temporal, box_: *const TBox) -> bool;
}
extern "C" {
    pub fn left_tnumber_tnumber(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn left_tpoint_stbox(temp: *const Temporal, box_: *const STBox) -> bool;
}
extern "C" {
    pub fn left_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn overabove_stbox_tpoint(box_: *const STBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn overabove_tpoint_stbox(temp: *const Temporal, box_: *const STBox) -> bool;
}
extern "C" {
    pub fn overabove_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn overafter_stbox_tpoint(box_: *const STBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn overafter_tbox_tnumber(box_: *const TBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn overafter_temporal_tstzspan(temp: *const Temporal, s: *const Span) -> bool;
}
extern "C" {
    pub fn overafter_temporal_temporal(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn overafter_tnumber_tbox(temp: *const Temporal, box_: *const TBox) -> bool;
}
extern "C" {
    pub fn overafter_tnumber_tnumber(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn overafter_tpoint_stbox(temp: *const Temporal, box_: *const STBox) -> bool;
}
extern "C" {
    pub fn overafter_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn overafter_tstzspan_temporal(s: *const Span, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn overback_stbox_tpoint(box_: *const STBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn overback_tpoint_stbox(temp: *const Temporal, box_: *const STBox) -> bool;
}
extern "C" {
    pub fn overback_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn overbefore_stbox_tpoint(box_: *const STBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn overbefore_tbox_tnumber(box_: *const TBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn overbefore_temporal_tstzspan(temp: *const Temporal, s: *const Span) -> bool;
}
extern "C" {
    pub fn overbefore_temporal_temporal(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn overbefore_tnumber_tbox(temp: *const Temporal, box_: *const TBox) -> bool;
}
extern "C" {
    pub fn overbefore_tnumber_tnumber(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn overbefore_tpoint_stbox(temp: *const Temporal, box_: *const STBox) -> bool;
}
extern "C" {
    pub fn overbefore_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn overbefore_tstzspan_temporal(s: *const Span, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn overbelow_stbox_tpoint(box_: *const STBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn overbelow_tpoint_stbox(temp: *const Temporal, box_: *const STBox) -> bool;
}
extern "C" {
    pub fn overbelow_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn overfront_stbox_tpoint(box_: *const STBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn overfront_tpoint_stbox(temp: *const Temporal, box_: *const STBox) -> bool;
}
extern "C" {
    pub fn overfront_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn overleft_numspan_tnumber(s: *const Span, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn overleft_stbox_tpoint(box_: *const STBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn overleft_tbox_tnumber(box_: *const TBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn overleft_tnumber_numspan(temp: *const Temporal, s: *const Span) -> bool;
}
extern "C" {
    pub fn overleft_tnumber_tbox(temp: *const Temporal, box_: *const TBox) -> bool;
}
extern "C" {
    pub fn overleft_tnumber_tnumber(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn overleft_tpoint_stbox(temp: *const Temporal, box_: *const STBox) -> bool;
}
extern "C" {
    pub fn overleft_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn overright_numspan_tnumber(s: *const Span, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn overright_stbox_tpoint(box_: *const STBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn overright_tbox_tnumber(box_: *const TBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn overright_tnumber_numspan(temp: *const Temporal, s: *const Span) -> bool;
}
extern "C" {
    pub fn overright_tnumber_tbox(temp: *const Temporal, box_: *const TBox) -> bool;
}
extern "C" {
    pub fn overright_tnumber_tnumber(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn overright_tpoint_stbox(temp: *const Temporal, box_: *const STBox) -> bool;
}
extern "C" {
    pub fn overright_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn right_numspan_tnumber(s: *const Span, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn right_stbox_tpoint(box_: *const STBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn right_tbox_tnumber(box_: *const TBox, temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn right_tnumber_numspan(temp: *const Temporal, s: *const Span) -> bool;
}
extern "C" {
    pub fn right_tnumber_tbox(temp: *const Temporal, box_: *const TBox) -> bool;
}
extern "C" {
    pub fn right_tnumber_tnumber(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn right_tpoint_stbox(temp: *const Temporal, box_: *const STBox) -> bool;
}
extern "C" {
    pub fn right_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> bool;
}
extern "C" {
    pub fn tand_bool_tbool(b: bool, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tand_tbool_bool(temp: *const Temporal, b: bool) -> *mut Temporal;
}
extern "C" {
    pub fn tand_tbool_tbool(temp1: *const Temporal, temp2: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tbool_when_true(temp: *const Temporal) -> *mut SpanSet;
}
extern "C" {
    pub fn tnot_tbool(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tor_bool_tbool(b: bool, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tor_tbool_bool(temp: *const Temporal, b: bool) -> *mut Temporal;
}
extern "C" {
    pub fn tor_tbool_tbool(temp1: *const Temporal, temp2: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn add_float_tfloat(d: f64, tnumber: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn add_int_tint(i: ::std::os::raw::c_int, tnumber: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn add_tfloat_float(tnumber: *const Temporal, d: f64) -> *mut Temporal;
}
extern "C" {
    pub fn add_tint_int(tnumber: *const Temporal, i: ::std::os::raw::c_int) -> *mut Temporal;
}
extern "C" {
    pub fn add_tnumber_tnumber(
        tnumber1: *const Temporal,
        tnumber2: *const Temporal,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn div_float_tfloat(d: f64, tnumber: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn div_int_tint(i: ::std::os::raw::c_int, tnumber: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn div_tfloat_float(tnumber: *const Temporal, d: f64) -> *mut Temporal;
}
extern "C" {
    pub fn div_tint_int(tnumber: *const Temporal, i: ::std::os::raw::c_int) -> *mut Temporal;
}
extern "C" {
    pub fn div_tnumber_tnumber(
        tnumber1: *const Temporal,
        tnumber2: *const Temporal,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn mult_float_tfloat(d: f64, tnumber: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn mult_int_tint(i: ::std::os::raw::c_int, tnumber: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn mult_tfloat_float(tnumber: *const Temporal, d: f64) -> *mut Temporal;
}
extern "C" {
    pub fn mult_tint_int(tnumber: *const Temporal, i: ::std::os::raw::c_int) -> *mut Temporal;
}
extern "C" {
    pub fn mult_tnumber_tnumber(
        tnumber1: *const Temporal,
        tnumber2: *const Temporal,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn sub_float_tfloat(d: f64, tnumber: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn sub_int_tint(i: ::std::os::raw::c_int, tnumber: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn sub_tfloat_float(tnumber: *const Temporal, d: f64) -> *mut Temporal;
}
extern "C" {
    pub fn sub_tint_int(tnumber: *const Temporal, i: ::std::os::raw::c_int) -> *mut Temporal;
}
extern "C" {
    pub fn sub_tnumber_tnumber(
        tnumber1: *const Temporal,
        tnumber2: *const Temporal,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn tfloat_derivative(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tnumber_abs(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tnumber_angular_difference(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tnumber_delta_value(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn textcat_text_ttext(txt: *const text, temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn textcat_ttext_text(temp: *const Temporal, txt: *const text) -> *mut Temporal;
}
extern "C" {
    pub fn textcat_ttext_ttext(temp1: *const Temporal, temp2: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn ttext_upper(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn ttext_lower(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn ttext_initcap(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn distance_tfloat_float(temp: *const Temporal, d: f64) -> *mut Temporal;
}
extern "C" {
    pub fn distance_tint_int(temp: *const Temporal, i: ::std::os::raw::c_int) -> *mut Temporal;
}
extern "C" {
    pub fn distance_tnumber_tnumber(
        temp1: *const Temporal,
        temp2: *const Temporal,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn distance_tpoint_point(temp: *const Temporal, gs: *const GSERIALIZED) -> *mut Temporal;
}
extern "C" {
    pub fn distance_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn nad_stbox_geo(box_: *const STBox, gs: *const GSERIALIZED) -> f64;
}
extern "C" {
    pub fn nad_stbox_stbox(box1: *const STBox, box2: *const STBox) -> f64;
}
extern "C" {
    pub fn nad_tint_int(temp: *const Temporal, i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nad_tint_tbox(temp: *const Temporal, box_: *const TBox) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nad_tint_tint(temp1: *const Temporal, temp2: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nad_tboxint_tboxint(box1: *const TBox, box2: *const TBox) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nad_tfloat_float(temp: *const Temporal, d: f64) -> f64;
}
extern "C" {
    pub fn nad_tfloat_tfloat(temp1: *const Temporal, temp2: *const Temporal) -> f64;
}
extern "C" {
    pub fn nad_tfloat_tbox(temp: *const Temporal, box_: *const TBox) -> f64;
}
extern "C" {
    pub fn nad_tboxfloat_tboxfloat(box1: *const TBox, box2: *const TBox) -> f64;
}
extern "C" {
    pub fn nad_tpoint_geo(temp: *const Temporal, gs: *const GSERIALIZED) -> f64;
}
extern "C" {
    pub fn nad_tpoint_stbox(temp: *const Temporal, box_: *const STBox) -> f64;
}
extern "C" {
    pub fn nad_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> f64;
}
extern "C" {
    pub fn nai_tpoint_geo(temp: *const Temporal, gs: *const GSERIALIZED) -> *mut TInstant;
}
extern "C" {
    pub fn nai_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> *mut TInstant;
}
extern "C" {
    pub fn shortestline_tpoint_geo(
        temp: *const Temporal,
        gs: *const GSERIALIZED,
    ) -> *mut GSERIALIZED;
}
extern "C" {
    pub fn shortestline_tpoint_tpoint(
        temp1: *const Temporal,
        temp2: *const Temporal,
    ) -> *mut GSERIALIZED;
}
extern "C" {
    pub fn bearing_point_point(
        gs1: *const GSERIALIZED,
        gs2: *const GSERIALIZED,
        result: *mut f64,
    ) -> bool;
}
extern "C" {
    pub fn bearing_tpoint_point(
        temp: *const Temporal,
        gs: *const GSERIALIZED,
        invert: bool,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn bearing_tpoint_tpoint(temp1: *const Temporal, temp2: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn geo_gboxes(gs: *const GSERIALIZED, count: *mut ::std::os::raw::c_int) -> *mut GBOX;
}
extern "C" {
    pub fn tpoint_angular_difference(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tpoint_azimuth(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tpoint_convex_hull(temp: *const Temporal) -> *mut GSERIALIZED;
}
extern "C" {
    pub fn tpoint_cumulative_length(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tpoint_direction(temp: *const Temporal, result: *mut f64) -> bool;
}
extern "C" {
    pub fn tpoint_get_x(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tpoint_get_y(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tpoint_get_z(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tpoint_is_simple(temp: *const Temporal) -> bool;
}
extern "C" {
    pub fn tpoint_length(temp: *const Temporal) -> f64;
}
extern "C" {
    pub fn tpoint_speed(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tpoint_srid(temp: *const Temporal) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tpoint_trajectory(temp: *const Temporal) -> *mut GSERIALIZED;
}
extern "C" {
    pub fn tpoint_twcentroid(temp: *const Temporal) -> *mut GSERIALIZED;
}
extern "C" {
    pub fn geo_expand_space(gs: *const GSERIALIZED, d: f64) -> *mut STBox;
}
extern "C" {
    pub fn geomeas_to_tpoint(gs: *const GSERIALIZED) -> *mut Temporal;
}
extern "C" {
    pub fn tgeogpoint_to_tgeompoint(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tgeompoint_to_tgeogpoint(temp: *const Temporal) -> *mut Temporal;
}
extern "C" {
    pub fn tpoint_AsMVTGeom(
        temp: *const Temporal,
        bounds: *const STBox,
        extent: i32,
        buffer: i32,
        clip_geom: bool,
        gsarr: *mut *mut GSERIALIZED,
        timesarr: *mut *mut int64,
        count: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn tpoint_expand_space(temp: *const Temporal, d: f64) -> *mut STBox;
}
extern "C" {
    pub fn tpoint_make_simple(
        temp: *const Temporal,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut *mut Temporal;
}
extern "C" {
    pub fn tpoint_set_srid(temp: *const Temporal, srid: int32) -> *mut Temporal;
}
extern "C" {
    pub fn tpoint_tfloat_to_geomeas(
        tpoint: *const Temporal,
        measure: *const Temporal,
        segmentize: bool,
        result: *mut *mut GSERIALIZED,
    ) -> bool;
}
extern "C" {
    pub fn acontains_geo_tpoint(
        gs: *const GSERIALIZED,
        temp: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adisjoint_tpoint_geo(
        temp: *const Temporal,
        gs: *const GSERIALIZED,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adisjoint_tpoint_tpoint(
        temp1: *const Temporal,
        temp2: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adwithin_tpoint_geo(
        temp: *const Temporal,
        gs: *const GSERIALIZED,
        dist: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adwithin_tpoint_tpoint(
        temp1: *const Temporal,
        temp2: *const Temporal,
        dist: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aintersects_tpoint_geo(
        temp: *const Temporal,
        gs: *const GSERIALIZED,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aintersects_tpoint_tpoint(
        temp1: *const Temporal,
        temp2: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atouches_tpoint_geo(
        temp: *const Temporal,
        gs: *const GSERIALIZED,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn econtains_geo_tpoint(
        gs: *const GSERIALIZED,
        temp: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn edisjoint_tpoint_geo(
        temp: *const Temporal,
        gs: *const GSERIALIZED,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn edisjoint_tpoint_tpoint(
        temp1: *const Temporal,
        temp2: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn edwithin_tpoint_geo(
        temp: *const Temporal,
        gs: *const GSERIALIZED,
        dist: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn edwithin_tpoint_tpoint(
        temp1: *const Temporal,
        temp2: *const Temporal,
        dist: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eintersects_tpoint_geo(
        temp: *const Temporal,
        gs: *const GSERIALIZED,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eintersects_tpoint_tpoint(
        temp1: *const Temporal,
        temp2: *const Temporal,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn etouches_tpoint_geo(
        temp: *const Temporal,
        gs: *const GSERIALIZED,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcontains_geo_tpoint(
        gs: *const GSERIALIZED,
        temp: *const Temporal,
        restr: bool,
        atvalue: bool,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn tdisjoint_tpoint_geo(
        temp: *const Temporal,
        gs: *const GSERIALIZED,
        restr: bool,
        atvalue: bool,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn tdisjoint_tpoint_tpoint(
        temp1: *const Temporal,
        temp2: *const Temporal,
        restr: bool,
        atvalue: bool,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn tdwithin_tpoint_geo(
        temp: *const Temporal,
        gs: *const GSERIALIZED,
        dist: f64,
        restr: bool,
        atvalue: bool,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn tdwithin_tpoint_tpoint(
        temp1: *const Temporal,
        temp2: *const Temporal,
        dist: f64,
        restr: bool,
        atvalue: bool,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn tintersects_tpoint_geo(
        temp: *const Temporal,
        gs: *const GSERIALIZED,
        restr: bool,
        atvalue: bool,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn tintersects_tpoint_tpoint(
        temp1: *const Temporal,
        temp2: *const Temporal,
        restr: bool,
        atvalue: bool,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn ttouches_tpoint_geo(
        temp: *const Temporal,
        gs: *const GSERIALIZED,
        restr: bool,
        atvalue: bool,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn tbool_tand_transfn(state: *mut SkipList, temp: *const Temporal) -> *mut SkipList;
}
extern "C" {
    pub fn tbool_tor_transfn(state: *mut SkipList, temp: *const Temporal) -> *mut SkipList;
}
extern "C" {
    pub fn temporal_extent_transfn(s: *mut Span, temp: *const Temporal) -> *mut Span;
}
extern "C" {
    pub fn temporal_tagg_finalfn(state: *mut SkipList) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_tcount_transfn(state: *mut SkipList, temp: *const Temporal) -> *mut SkipList;
}
extern "C" {
    pub fn tfloat_tmax_transfn(state: *mut SkipList, temp: *const Temporal) -> *mut SkipList;
}
extern "C" {
    pub fn tfloat_tmin_transfn(state: *mut SkipList, temp: *const Temporal) -> *mut SkipList;
}
extern "C" {
    pub fn tfloat_tsum_transfn(state: *mut SkipList, temp: *const Temporal) -> *mut SkipList;
}
extern "C" {
    pub fn tfloat_wmax_transfn(
        state: *mut SkipList,
        temp: *const Temporal,
        interv: *const Interval,
    ) -> *mut SkipList;
}
extern "C" {
    pub fn tfloat_wmin_transfn(
        state: *mut SkipList,
        temp: *const Temporal,
        interv: *const Interval,
    ) -> *mut SkipList;
}
extern "C" {
    pub fn tfloat_wsum_transfn(
        state: *mut SkipList,
        temp: *const Temporal,
        interv: *const Interval,
    ) -> *mut SkipList;
}
extern "C" {
    pub fn timestamptz_tcount_transfn(state: *mut SkipList, t: TimestampTz) -> *mut SkipList;
}
extern "C" {
    pub fn tint_tmax_transfn(state: *mut SkipList, temp: *const Temporal) -> *mut SkipList;
}
extern "C" {
    pub fn tint_tmin_transfn(state: *mut SkipList, temp: *const Temporal) -> *mut SkipList;
}
extern "C" {
    pub fn tint_tsum_transfn(state: *mut SkipList, temp: *const Temporal) -> *mut SkipList;
}
extern "C" {
    pub fn tint_wmax_transfn(
        state: *mut SkipList,
        temp: *const Temporal,
        interv: *const Interval,
    ) -> *mut SkipList;
}
extern "C" {
    pub fn tint_wmin_transfn(
        state: *mut SkipList,
        temp: *const Temporal,
        interv: *const Interval,
    ) -> *mut SkipList;
}
extern "C" {
    pub fn tint_wsum_transfn(
        state: *mut SkipList,
        temp: *const Temporal,
        interv: *const Interval,
    ) -> *mut SkipList;
}
extern "C" {
    pub fn tnumber_extent_transfn(box_: *mut TBox, temp: *const Temporal) -> *mut TBox;
}
extern "C" {
    pub fn tnumber_tavg_finalfn(state: *mut SkipList) -> *mut Temporal;
}
extern "C" {
    pub fn tnumber_tavg_transfn(state: *mut SkipList, temp: *const Temporal) -> *mut SkipList;
}
extern "C" {
    pub fn tnumber_wavg_transfn(
        state: *mut SkipList,
        temp: *const Temporal,
        interv: *const Interval,
    ) -> *mut SkipList;
}
extern "C" {
    pub fn tpoint_extent_transfn(box_: *mut STBox, temp: *const Temporal) -> *mut STBox;
}
extern "C" {
    pub fn tpoint_tcentroid_finalfn(state: *mut SkipList) -> *mut Temporal;
}
extern "C" {
    pub fn tpoint_tcentroid_transfn(state: *mut SkipList, temp: *mut Temporal) -> *mut SkipList;
}
extern "C" {
    pub fn tstzset_tcount_transfn(state: *mut SkipList, s: *const Set) -> *mut SkipList;
}
extern "C" {
    pub fn tstzspan_tcount_transfn(state: *mut SkipList, s: *const Span) -> *mut SkipList;
}
extern "C" {
    pub fn tstzspanset_tcount_transfn(state: *mut SkipList, ss: *const SpanSet) -> *mut SkipList;
}
extern "C" {
    pub fn ttext_tmax_transfn(state: *mut SkipList, temp: *const Temporal) -> *mut SkipList;
}
extern "C" {
    pub fn ttext_tmin_transfn(state: *mut SkipList, temp: *const Temporal) -> *mut SkipList;
}
extern "C" {
    pub fn temporal_simplify_dp(
        temp: *const Temporal,
        eps_dist: f64,
        synchronized: bool,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_simplify_max_dist(
        temp: *const Temporal,
        eps_dist: f64,
        synchronized: bool,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_simplify_min_dist(temp: *const Temporal, dist: f64) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_simplify_min_tdelta(
        temp: *const Temporal,
        mint: *const Interval,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_tprecision(
        temp: *const Temporal,
        duration: *const Interval,
        origin: TimestampTz,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_tsample(
        temp: *const Temporal,
        duration: *const Interval,
        origin: TimestampTz,
        interp: interpType,
    ) -> *mut Temporal;
}
extern "C" {
    pub fn temporal_dyntimewarp_distance(temp1: *const Temporal, temp2: *const Temporal) -> f64;
}
extern "C" {
    pub fn temporal_dyntimewarp_path(
        temp1: *const Temporal,
        temp2: *const Temporal,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Match;
}
extern "C" {
    pub fn temporal_frechet_distance(temp1: *const Temporal, temp2: *const Temporal) -> f64;
}
extern "C" {
    pub fn temporal_frechet_path(
        temp1: *const Temporal,
        temp2: *const Temporal,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Match;
}
extern "C" {
    pub fn temporal_hausdorff_distance(temp1: *const Temporal, temp2: *const Temporal) -> f64;
}
extern "C" {
    pub fn bigint_get_bin(value: int64, vsize: int64, vorigin: int64) -> int64;
}
extern "C" {
    pub fn bigintspan_bins(
        s: *const Span,
        vsize: int64,
        vorigin: int64,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn bigintspanset_bins(
        ss: *const SpanSet,
        vsize: int64,
        vorigin: int64,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn bigintspanset_value_spans(
        ss: *const SpanSet,
        vsize: int64,
        vorigin: int64,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn date_get_bin(d: DateADT, duration: *const Interval, torigin: DateADT) -> DateADT;
}
extern "C" {
    pub fn datespan_bins(
        s: *const Span,
        duration: *const Interval,
        torigin: DateADT,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn datespanset_bins(
        ss: *const SpanSet,
        duration: *const Interval,
        torigin: DateADT,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn datespanset_time_spans(
        ss: *const SpanSet,
        duration: *const Interval,
        torigin: DateADT,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn float_get_bin(value: f64, vsize: f64, vorigin: f64) -> f64;
}
extern "C" {
    pub fn floatspan_bins(
        s: *const Span,
        vsize: f64,
        vorigin: f64,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn floatspanset_bins(
        ss: *const SpanSet,
        vsize: f64,
        vorigin: f64,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn floatspanset_value_spans(
        ss: *const SpanSet,
        vsize: f64,
        vorigin: f64,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn int_get_bin(
        value: ::std::os::raw::c_int,
        vsize: ::std::os::raw::c_int,
        vorigin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn intspan_bins(
        s: *const Span,
        vsize: ::std::os::raw::c_int,
        vorigin: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn intspanset_bins(
        ss: *const SpanSet,
        vsize: ::std::os::raw::c_int,
        vorigin: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn intspanset_value_spans(
        ss: *const SpanSet,
        vsize: ::std::os::raw::c_int,
        vorigin: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn timestamptz_get_bin(
        t: TimestampTz,
        duration: *const Interval,
        torigin: TimestampTz,
    ) -> TimestampTz;
}
extern "C" {
    pub fn tstzspan_bins(
        s: *const Span,
        duration: *const Interval,
        origin: TimestampTz,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn tstzspanset_bins(
        ss: *const SpanSet,
        duration: *const Interval,
        torigin: TimestampTz,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn tstzspanset_time_spans(
        ss: *const SpanSet,
        duration: *const Interval,
        torigin: TimestampTz,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn stbox_get_space_tile(
        point: *const GSERIALIZED,
        xsize: f64,
        ysize: f64,
        zsize: f64,
        sorigin: *const GSERIALIZED,
    ) -> *mut STBox;
}
extern "C" {
    pub fn stbox_get_space_time_tile(
        point: *const GSERIALIZED,
        t: TimestampTz,
        xsize: f64,
        ysize: f64,
        zsize: f64,
        duration: *const Interval,
        sorigin: *const GSERIALIZED,
        torigin: TimestampTz,
    ) -> *mut STBox;
}
extern "C" {
    pub fn stbox_get_time_tile(
        t: TimestampTz,
        duration: *const Interval,
        torigin: TimestampTz,
    ) -> *mut STBox;
}
extern "C" {
    pub fn stbox_space_tiles(
        bounds: *const STBox,
        xsize: f64,
        ysize: f64,
        zsize: f64,
        sorigin: *const GSERIALIZED,
        border_inc: bool,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut STBox;
}
extern "C" {
    pub fn stbox_space_time_tiles(
        bounds: *const STBox,
        xsize: f64,
        ysize: f64,
        zsize: f64,
        duration: *const Interval,
        sorigin: *const GSERIALIZED,
        torigin: TimestampTz,
        border_inc: bool,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut STBox;
}
extern "C" {
    pub fn stbox_time_tiles(
        bounds: *const STBox,
        duration: *const Interval,
        torigin: TimestampTz,
        border_inc: bool,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut STBox;
}
extern "C" {
    pub fn temporal_time_spans(
        temp: *const Temporal,
        duration: *const Interval,
        origin: TimestampTz,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn temporal_time_split(
        temp: *const Temporal,
        duration: *const Interval,
        torigin: TimestampTz,
        time_bins: *mut *mut TimestampTz,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut *mut Temporal;
}
extern "C" {
    pub fn tfloat_value_spans(
        temp: *const Temporal,
        vsize: f64,
        vorigin: f64,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn tfloat_value_split(
        temp: *const Temporal,
        vsize: f64,
        vorigin: f64,
        value_bins: *mut *mut f64,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut *mut Temporal;
}
extern "C" {
    pub fn tfloat_value_time_split(
        temp: *const Temporal,
        vsize: f64,
        duration: *const Interval,
        vorigin: f64,
        torigin: TimestampTz,
        value_bins: *mut *mut f64,
        time_bins: *mut *mut TimestampTz,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut *mut Temporal;
}
extern "C" {
    pub fn tfloatbox_get_time_tile(
        t: TimestampTz,
        duration: *const Interval,
        torigin: TimestampTz,
    ) -> *mut TBox;
}
extern "C" {
    pub fn tfloatbox_get_value_tile(value: f64, vsize: f64, vorigin: f64) -> *mut TBox;
}
extern "C" {
    pub fn tfloatbox_get_value_time_tile(
        value: f64,
        t: TimestampTz,
        vsize: f64,
        duration: *const Interval,
        vorigin: f64,
        torigin: TimestampTz,
    ) -> *mut TBox;
}
extern "C" {
    pub fn tfloatbox_time_tiles(
        box_: *const TBox,
        duration: *const Interval,
        torigin: TimestampTz,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut TBox;
}
extern "C" {
    pub fn tfloatbox_value_tiles(
        box_: *const TBox,
        vsize: f64,
        vorigin: f64,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut TBox;
}
extern "C" {
    pub fn tfloatbox_value_time_tiles(
        box_: *const TBox,
        vsize: f64,
        duration: *const Interval,
        vorigin: f64,
        torigin: TimestampTz,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut TBox;
}
extern "C" {
    pub fn tint_value_spans(
        temp: *const Temporal,
        vsize: ::std::os::raw::c_int,
        vorigin: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut Span;
}
extern "C" {
    pub fn tint_value_split(
        temp: *const Temporal,
        vsize: ::std::os::raw::c_int,
        vorigin: ::std::os::raw::c_int,
        value_bins: *mut *mut ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut *mut Temporal;
}
extern "C" {
    pub fn tint_value_time_split(
        temp: *const Temporal,
        size: ::std::os::raw::c_int,
        duration: *const Interval,
        vorigin: ::std::os::raw::c_int,
        torigin: TimestampTz,
        value_bins: *mut *mut ::std::os::raw::c_int,
        time_bins: *mut *mut TimestampTz,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut *mut Temporal;
}
extern "C" {
    pub fn tintbox_get_time_tile(
        t: TimestampTz,
        duration: *const Interval,
        torigin: TimestampTz,
    ) -> *mut TBox;
}
extern "C" {
    pub fn tintbox_get_value_tile(
        value: ::std::os::raw::c_int,
        vsize: ::std::os::raw::c_int,
        vorigin: ::std::os::raw::c_int,
    ) -> *mut TBox;
}
extern "C" {
    pub fn tintbox_get_value_time_tile(
        value: ::std::os::raw::c_int,
        t: TimestampTz,
        vsize: ::std::os::raw::c_int,
        duration: *const Interval,
        vorigin: ::std::os::raw::c_int,
        torigin: TimestampTz,
    ) -> *mut TBox;
}
extern "C" {
    pub fn tintbox_time_tiles(
        box_: *const TBox,
        duration: *const Interval,
        torigin: TimestampTz,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut TBox;
}
extern "C" {
    pub fn tintbox_value_tiles(
        box_: *const TBox,
        xsize: ::std::os::raw::c_int,
        xorigin: ::std::os::raw::c_int,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut TBox;
}
extern "C" {
    pub fn tintbox_value_time_tiles(
        box_: *const TBox,
        xsize: ::std::os::raw::c_int,
        duration: *const Interval,
        xorigin: ::std::os::raw::c_int,
        torigin: TimestampTz,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut TBox;
}
extern "C" {
    pub fn tpoint_space_split(
        temp: *const Temporal,
        xsize: f64,
        ysize: f64,
        zsize: f64,
        sorigin: *const GSERIALIZED,
        bitmatrix: bool,
        border_inc: bool,
        space_bins: *mut *mut *mut GSERIALIZED,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut *mut Temporal;
}
extern "C" {
    pub fn tpoint_space_time_split(
        temp: *const Temporal,
        xsize: f64,
        ysize: f64,
        zsize: f64,
        duration: *const Interval,
        sorigin: *const GSERIALIZED,
        torigin: TimestampTz,
        bitmatrix: bool,
        border_inc: bool,
        space_bins: *mut *mut *mut GSERIALIZED,
        time_bins: *mut *mut TimestampTz,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut *mut Temporal;
}
extern "C" {
    pub fn tpoint_time_split(
        temp: *const Temporal,
        duration: *const Interval,
        torigin: TimestampTz,
        border_inc: bool,
        time_bins: *mut *mut TimestampTz,
        count: *mut ::std::os::raw::c_int,
    ) -> *mut *mut Temporal;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
